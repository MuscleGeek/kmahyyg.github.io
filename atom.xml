<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Potato Online</title>
  
  <subtitle>Trust , But Verify !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.kmahyyg.xyz/"/>
  <updated>2018-10-31T12:46:45.532Z</updated>
  <id>https://www.kmahyyg.xyz/</id>
  
  <author>
    <name>Patrick Young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>将 CUPS 共享的打印机转为 Airprint 适用</title>
    <link href="https://www.kmahyyg.xyz/2018/Cups2Airprint/"/>
    <id>https://www.kmahyyg.xyz/2018/Cups2Airprint/</id>
    <published>2018-10-24T10:31:57.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Convert-CUPS-Printer-to-Airprint-available"><a href="#Convert-CUPS-Printer-to-Airprint-available" class="headerlink" title="Convert CUPS Printer to Airprint-available"></a>Convert CUPS Printer to Airprint-available</h1><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>由于人民日益增长的打印需要与打印店日益下降的打印质量和开门时间存在的巨大矛盾，已经穷得吃土的我买了一个打印机。<del>然而，迫于钱没加够，又有自动双面打印的需要（手动双面打印总是把纸放反……）所以舍弃了网络打印，买了个自动双面打印功能的 USB 打印机。</del></p><h2 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h2><ol><li>一台已经连接到打印机的服务器</li><li>一台安装了对应 Linux 发行版及对应打印机驱动并连接到对应局域网的 Linux 主机</li><li>可以正常运作的 CUPS 和 Avahi Daemon</li></ol><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>请先确保您的打印机此时已经可以正常工作并能通过物理连接正常打印。</p><h3 id="CUPSD-添加打印机"><a href="#CUPSD-添加打印机" class="headerlink" title="CUPSD 添加打印机"></a>CUPSD 添加打印机</h3><p>添加一个打印机，做好默认设置，务必把打印机的默认打印设置配置好之后设为共享打印机，并对 CUPSD 打印服务器整体的打印共享功能打开。</p><h3 id="CUPSD-配置文件修改"><a href="#CUPSD-配置文件修改" class="headerlink" title="CUPSD 配置文件修改"></a>CUPSD 配置文件修改</h3><blockquote><p>/etc/cups/cupsd.conf </p></blockquote><p>在 <code>Listen /run/cups/cups.sock</code> 后面添加这个。</p><pre><code>Listen /run/cups/cups.sockListen 0.0.0.0:631PreserveJobHistoryFileDevice YesServerAlias *</code></pre><p>在这里添加对应的缺失的几行，并在 Web 管理控制端勾起 <code>Share printers connected to this system</code> 。</p><pre><code>&lt;Location /&gt;  # Allow shared printing...  Order allow,deny  Allow @LOCAL&lt;/Location&gt;&lt;Location /admin&gt;  Order allow,deny  allow @LOCAL&lt;/Location&gt;&lt;Location /admin/conf&gt;  AuthType Default  Require user @SYSTEM&lt;/Location&gt;&lt;Location /admin/log&gt;  AuthType Default  Require user @SYSTEM  Order allow,deny  allow @LOCAL&lt;/Location&gt;</code></pre><h3 id="创建-MIME-应用类型配置"><a href="#创建-MIME-应用类型配置" class="headerlink" title="创建 MIME 应用类型配置"></a>创建 MIME 应用类型配置</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># echo "image/urf urf string(0,UNIRAST&lt;00>)" > \</span>    /usr/share/cups/mime/airprint.types<span class="token comment" spellcheck="true"># echo "image/urf application/pdf 100 pdftoraster" > \</span>    /usr/share/cups/mime/airprint.convs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Avahi-Daemon-配置文件修改"><a href="#Avahi-Daemon-配置文件修改" class="headerlink" title="Avahi Daemon 配置文件修改"></a>Avahi Daemon 配置文件修改</h3><blockquote><p>/etc/avahi/avahi-daemon.conf </p></blockquote><pre><code>domain-name=local</code></pre><p>将这一行的注释符号去除。</p><h3 id="Avahi-Daemon-及-打印机支持添加"><a href="#Avahi-Daemon-及-打印机支持添加" class="headerlink" title="Avahi Daemon 及 打印机支持添加"></a>Avahi Daemon 及 打印机支持添加</h3><p>下载 参考文献 2 中的对应的 Python 脚本，并安装对应支持库。</p><p>请注意，该脚本只支持 Python 2, 安装依赖：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update -y <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libxml2-dev$ <span class="token function">sudo</span> pip2 <span class="token function">install</span> pycups$ <span class="token function">sudo</span> pip2 <span class="token function">install</span> lxml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来使用对应的参数将会对所有已经在 CUPSD 中配置好的打印机生成对应的 Avahi 服务并保存到对应目录：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> python2 ./airprint-generate.py -P <span class="token operator">&lt;</span>CUPS 服务器端口号<span class="token operator">></span> -u root -d /etc/avahi/services -p c2a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启服务，完成配置</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl restart avahi-daemon.service$ <span class="token function">sudo</span> systemctl restart org.cups.cupsd.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy"></a>Enjoy</h2><p>打开连接到同一局域网的苹果设备，尝试打印，你就能看到对应 PC 连接的打印机了。</p><h2 id="Acknowledgement"><a href="#Acknowledgement" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h2><ul><li><a href="https://askubuntu.com/questions/26130/how-can-share-my-printer-so-that-i-can-use-it-with-airprint" target="_blank" rel="noopener">AskUbuntu</a></li><li><a href="https://github.com/tjfontaine/airprint-generate" target="_blank" rel="noopener">Airprint Service Generator</a></li><li><a href="https://ezunix.org/index.php?title=Enable_iOS_AirPrint_with_any_printer_supported_by_CUPS" target="_blank" rel="noopener">EzUnix Tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Convert-CUPS-Printer-to-Airprint-available&quot;&gt;&lt;a href=&quot;#Convert-CUPS-Printer-to-Airprint-available&quot; class=&quot;headerlink&quot; title=&quot;Convert 
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://www.kmahyyg.xyz/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验 4 - 迷宫</title>
    <link href="https://www.kmahyyg.xyz/2018/DS04-Maze-EXP/"/>
    <id>https://www.kmahyyg.xyz/2018/DS04-Maze-EXP/</id>
    <published>2018-10-18T23:57:13.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><p>请先阅读 <a href="https://github.com/octowhale/Stop-Ask-Questions-The-Stupid-Ways/blob/master/README.md" target="_blank" rel="noopener">我要提问</a> 之后再看下文。</p><h1 id="数据结构实验-4-迷宫"><a href="#数据结构实验-4-迷宫" class="headerlink" title="数据结构实验 4 - 迷宫"></a>数据结构实验 4 - 迷宫</h1><p>实验代码和实验要求请参见 <a href="https://github.com/kmahyyg/datastru-ynu" target="_blank" rel="noopener">我的 Github 项目 (Private)</a></p><p>本篇博文将更加注重着眼于：</p><ul><li>具体迷宫生成实现</li><li>自动完成迷宫实现</li><li>实现过程中新学到的东西和踩的坑</li><li>libncurses 的应用</li><li>矩阵的压缩存储</li><li>其他的一些我还没想到但需要记录的东西</li></ul><h2 id="libncurses"><a href="#libncurses" class="headerlink" title="libncurses"></a>libncurses</h2><h2 id="stdarg-h"><a href="#stdarg-h" class="headerlink" title="stdarg.h"></a>stdarg.h</h2><h3 id="举一反三：-Python-Non-keyword-Argument"><a href="#举一反三：-Python-Non-keyword-Argument" class="headerlink" title="举一反三： Python - Non-keyword Argument"></a>举一反三： Python - Non-keyword Argument</h3><p>Pass the <strong>variable length argument list with single asterisk</strong>.</p><p>Inside the function, we have a loop which adds the passed argument and prints the result. We passed 3 different tuples with variable length as an argument to the function.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> num<span class="token punctuation">:</span>        sum <span class="token operator">=</span> sum <span class="token operator">+</span> n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sum:"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span>adder<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>adder<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>adder<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Sum: 8Sum: 22Sum: 17</code></pre><h3 id="举一反三：-Python-Keyword-Argument"><a href="#举一反三：-Python-Keyword-Argument" class="headerlink" title="举一反三： Python - Keyword Argument"></a>举一反三： Python - Keyword Argument</h3><p>Use a <strong>dictionary-like parameters with double asterisk</strong> passed to the function.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">intro</span><span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nData type of argument:"</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                          <span class="token comment" spellcheck="true"># inside loop</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} is {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>intro<span class="token punctuation">(</span>Firstname<span class="token operator">=</span><span class="token string">"Sita"</span><span class="token punctuation">,</span> Lastname<span class="token operator">=</span><span class="token string">"Sharma"</span><span class="token punctuation">,</span> Age<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span> Phone<span class="token operator">=</span><span class="token number">1234567890</span><span class="token punctuation">)</span>intro<span class="token punctuation">(</span>Firstname<span class="token operator">=</span><span class="token string">"John"</span><span class="token punctuation">,</span> Lastname<span class="token operator">=</span><span class="token string">"Wood"</span><span class="token punctuation">,</span> Email<span class="token operator">=</span><span class="token string">"johnwood@nomail.com"</span><span class="token punctuation">,</span> Country<span class="token operator">=</span><span class="token string">"Wakanda"</span><span class="token punctuation">,</span> Age<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> Phone<span class="token operator">=</span><span class="token number">9876543210</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Data type of argument: &lt;class &#39;dict&#39;&gt;Firstname is SitaLastname is SharmaAge is 22Phone is 1234567890Data type of argument: &lt;class &#39;dict&#39;&gt;Firstname is JohnLastname is WoodEmail is johnwood@nomail.comCountry is WakandaAge is 25Phone is 9876543210</code></pre><h3 id="stdarg-h-在-C-中的应用"><a href="#stdarg-h-在-C-中的应用" class="headerlink" title="stdarg.h 在 C 中的应用"></a>stdarg.h 在 C 中的应用</h3><p>建议少用或者尽量不用。</p><h4 id="库变量与库宏"><a href="#库变量与库宏" class="headerlink" title="库变量与库宏"></a>库变量与库宏</h4><p><code>va_list</code> ： 适用于 <code>va_start() va_arg() va_end()</code> 三个宏存储信息的类型，可近似等价于可变链表。</p><p><code>void va_start(va_list ap, last_arg);</code> 初始化 <code>ap</code> 变量，与 <code>va_arg</code> <code>va_end</code> 共同使用，<code>last_arg</code> 是最后一个传递给函数的已知的固定参数，即省略号前的参数。</p><p><code>type va_arg(va_list ap, type);</code> 这个宏检索函数参数列表 <code>va_list ap</code> 中类型为 <code>type</code> 的 <strong>下一个参数</strong> 。 该函数应当理解为 <strong>指针</strong> ，函数返回为 <strong>有序列表中的符合对应类型的最近一个数据</strong>，函数参数以数据结构 <strong>栈</strong> 形式存储，从左向右入栈。</p><p><code>void va_end(va_list ap);</code> 这个宏允许使用了带有 <code>va_start</code> 宏的带有可变参数的函数返回，若函数返回前未调用 <code>va_end</code> ，则结果为 <code>undefined</code>.</p><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4><p>Compile ： <code>gcc -std=c99 test.c -o test</code></p><p>test.c :</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token keyword">int</span> <span class="token function">echoinfo</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>strNotice<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> noti<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>noti<span class="token punctuation">,</span><span class="token string">"The printout is"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">echoinfo</span><span class="token punctuation">(</span>noti<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">echoinfo</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>strNotice<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str0 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    va_list stArgv<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// define a param list</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>stArgv<span class="token punctuation">,</span> strNotice<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// pass the fixed param to the function</span>    str0 <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>stArgv<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str1 <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>stArgv<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str2 <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>stArgv<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s: %s %s %s"</span><span class="token punctuation">,</span> strNotice<span class="token punctuation">,</span> str0<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>stArgv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迷宫生成"><a href="#迷宫生成" class="headerlink" title="迷宫生成"></a>迷宫生成</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>由于之前完全没有接触过这类实现，本次实现将采用 Python 进行一次预实现。</p><p><strong><a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" target="_blank" rel="noopener">Python 多维数组的浅拷贝问题 - 关于列表</a></strong> </p><p><strong><a href="https://docs.python.org/3/faq/programming.html#faq-multidimensional-list" target="_blank" rel="noopener">Python 多维数组的浅拷贝问题 - 官方 FAQ</a></strong></p><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><p>官方的建议：</p><blockquote><p>listA = [[None] *2] *3<br>这样的使用 * 创建的一个列表，并没有创建内部列表的三次拷贝，而是创建了三次同样的链接到内部的列表。所以你如果修改任何一个内部列表，三个外部链接的值也会跟随改变。</p></blockquote><p>正确的做法是：</p><ol><li>使用 <code>numpy</code> 等提供矩阵类型的工具。</li><li>使用下列代码：</li></ol><pre class="line-numbers language-python"><code class="language-python">A <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等价于：</p><pre class="line-numbers language-python"><code class="language-python">w<span class="token punctuation">,</span> h <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> w <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="具体的整段代码"><a href="#具体的整段代码" class="headerlink" title="具体的整段代码"></a>具体的整段代码</h4><p>参见对应 Gist：</p><h2 id="迷宫自动完成"><a href="#迷宫自动完成" class="headerlink" title="迷宫自动完成"></a>迷宫自动完成</h2><h2 id="编写过程中的实现问题"><a href="#编写过程中的实现问题" class="headerlink" title="编写过程中的实现问题"></a>编写过程中的实现问题</h2><h3 id="Dirty-Workaround-ycomlib-h"><a href="#Dirty-Workaround-ycomlib-h" class="headerlink" title="Dirty Workaround (ycomlib.h)"></a>Dirty Workaround (ycomlib.h)</h3><h1 id="Acknowledgement"><a href="#Acknowledgement" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h1><ul><li><a href="https://docs.python.org/3/" target="_blank" rel="noopener">Python official document list</a></li><li><a href="https://blog.csdn.net/crystal_tyan/article/details/42523861" target="_blank" rel="noopener">Recursive backtracker mtod for maze generation</a></li><li><a href="https://blog.csdn.net/juzihongle1/article/details/73135920" target="_blank" rel="noopener">Three widely used mtod for maze generation</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在最前&quot;&gt;&lt;a href=&quot;#写在最前&quot; class=&quot;headerlink&quot; title=&quot;写在最前&quot;&gt;&lt;/a&gt;写在最前&lt;/h1&gt;&lt;p&gt;请先阅读 &lt;a href=&quot;https://github.com/octowhale/Stop-Ask-Questions-
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://www.kmahyyg.xyz/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>正确提问</title>
    <link href="https://www.kmahyyg.xyz/2018/Ask-Questions/"/>
    <id>https://www.kmahyyg.xyz/2018/Ask-Questions/</id>
    <published>2018-10-18T22:22:23.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<p>送给所有人，也送给我自己：</p><p><strong>提问之前你们 TMD 看一看这些再问好吗！！</strong></p><h2 id="Stop-Ask-Questions-the-Stupid-Way"><a href="#Stop-Ask-Questions-the-Stupid-Way" class="headerlink" title="Stop Ask Questions the Stupid Way"></a>Stop Ask Questions the Stupid Way</h2><ul><li><a href="https://github.com/octowhale/Stop-Ask-Questions-The-Stupid-Ways/blob/master/README.md" target="_blank" rel="noopener">https://github.com/octowhale/Stop-Ask-Questions-The-Stupid-Ways/blob/master/README.md</a></li></ul><h2 id="How-to-Ask-Questions-the-Smart-Way"><a href="#How-to-Ask-Questions-the-Smart-Way" class="headerlink" title="How to Ask Questions the Smart Way"></a>How to Ask Questions the Smart Way</h2><ul><li><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;送给所有人，也送给我自己：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提问之前你们 TMD 看一看这些再问好吗！！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Stop-Ask-Questions-the-Stupid-Way&quot;&gt;&lt;a href=&quot;#Stop-Ask-Questions-
      
    
    </summary>
    
    
      <category term="School" scheme="https://www.kmahyyg.xyz/tags/School/"/>
    
  </entry>
  
  <entry>
    <title>CAMAL 离线下载套件</title>
    <link href="https://www.kmahyyg.xyz/2018/CAMAL-OfflineDL/"/>
    <id>https://www.kmahyyg.xyz/2018/CAMAL-OfflineDL/</id>
    <published>2018-10-18T13:26:19.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CAMAL 离线下载套件，顾名思义：Caddy + AriaNG + Mldonkey(ED2K) + Aria2(BT+PT+HTTP+FTP+MAGNET) + Linux 用于简单搭建一个离线下载系统。</p><p>上述提到的软件均将运行在 x86_64 架构的计算机上。请在部署时注意您和您所租用的离线下载服务器所在地的法律法规，本人不承担任何相关的法律责任。</p><p>如您需要 不接受 DMCA 争议的离岸服务器，请参考本人最后一个参考文献。</p><h1 id="软件下载与基础部署"><a href="#软件下载与基础部署" class="headerlink" title="软件下载与基础部署"></a>软件下载与基础部署</h1><p>示例环境：Ubuntu 18.04.1 LTS Full Installation via LXC Virtualization</p><ul><li>Caddy Webserver with FileManager</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># apt update -y</span><span class="token comment" spellcheck="true"># apt install curl wget ca-certificates -y</span><span class="token comment" spellcheck="true"># curl https://getcaddy.com | bash -s personal http.filemanager,http.forwardproxy,http.ipfilter,http.login,http.minify,http.nobots,http.upload,tls.dns.rfc2136</span>$ <span class="token comment" spellcheck="true"># 编辑配置文件 /etc/Caddyfile</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动：<code>nohup caddy -conf /etc/Caddyfile &gt; /dev/null 2&gt;&amp;1 &amp;</code></p><p>关于 CaddyServer 的 systmed 后台守护，请参见 <a href="https://github.com/mholt/caddy/tree/master/dist/init/linux-systemd" target="_blank" rel="noopener">此处</a></p><ul><li><p><a href="https://github.com/mayswind/AriaNg/releases/download/0.5.0/AriaNg-0.5.0.zip" target="_blank" rel="noopener">AriaNG Web前端</a></p></li><li><p>Aria2</p></li></ul><p>推荐使用参考文献中对应的一键脚本直接部署，方便简洁快速。如果您熟悉相关配置，您也可以选择从软件仓库安装之后手动配置。</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt update -y$ <span class="token function">sudo</span> apt <span class="token function">install</span> aria2 -y$ <span class="token comment" spellcheck="true"># 编辑配置文件</span>$ aria2c -D --conf-path <span class="token operator">&lt;</span>Config <span class="token function">file</span> path<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一键脚本链接：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>MlDonkey</li></ul><p>从软件仓库安装并启动：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt update -y$ <span class="token function">sudo</span> apt <span class="token function">install</span> mldonkey-server -y$ <span class="token comment" spellcheck="true"># 编辑系统配置文件 /var/lib/mldonkey/downloads.ini</span>$ <span class="token function">sudo</span> systemctl <span class="token function">enable</span> mldonkey-server$ <span class="token function">sudo</span> systemctl start mldonkey-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部分配置文件"><a href="#部分配置文件" class="headerlink" title="部分配置文件"></a>部分配置文件</h2><p>以下仅展示可运行的最简配置文件，更多详情请参考软件的 Manual Page.</p><p>部分文件由于默认配置过长，仅展示修改过的部分。</p><h3 id="Caddy-Caddyfile"><a href="#Caddy-Caddyfile" class="headerlink" title="Caddy (Caddyfile)"></a>Caddy (Caddyfile)</h3><p>由于一般情况下，对于一些特大文件的传输，在运营商不存在劫持或文件过于冷门，且不存在文件审查的情况下，就使用 HTTP 传输就可以了，没必要对这类文件使用 HTTPS。</p><p><code>/aria</code> 为 AriaNG 入口。</p><pre><code>https://你的回源二级域名 {  root &lt;保存下载路径的上级目录&gt;  redir /aria &lt;AriaNG 的 index.html 相对 root 的路径&gt; 302  timeouts none  gzip  tls &lt;证书&gt; &lt;私钥&gt;  header / {    Strict-Transport-Security &quot;max-age=31536000;&quot;    X-XSS-Protection &quot;1; mode=block&quot;    X-Content-Type-Options &quot;nosniff&quot;    X-Frame-Options &quot;DENY&quot;  }  filemanager &lt;网盘入口相对路径&gt; {    database &lt;网盘数据库文件保存位置&gt;/filemgr.db  }}http://你的CDN加速域名 {  root &lt;保存下载路径的上级目录&gt;  redir /aria &lt;AriaNG 的 index.html 相对路径&gt; 302  timeouts none  gzip  filemanager &lt;网盘入口相对路径&gt; {    database &lt;网盘数据库文件保存位置&gt;/filemgr.db  }}</code></pre><p><strong>请在下载目录下执行运行 Caddy 的命令，以避免一些问题。</strong></p><h3 id="Aria2-aria2-conf"><a href="#Aria2-aria2-conf" class="headerlink" title="Aria2 (aria2.conf)"></a>Aria2 (aria2.conf)</h3><pre><code>## 文件保存相关 ### 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置dir=&lt;保存下载路径&gt;# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16Mdisk-cache=32M# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc# 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc# falloc和trunc则需要文件系统和内核支持# NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项file-allocation=trunc# 断点续传continue=true## 下载连接相关 ### 最大同时下载任务数, 运行时可修改, 默认:5max-concurrent-downloads=5# 同一服务器连接数, 添加时可指定, 默认:1max-connection-per-server=16# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M# 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载min-split-size=10M# 单个任务最大线程数, 添加时可指定, 默认:5split=20# 整体下载速度限制, 运行时可修改, 默认:0#max-overall-download-limit=0# 单个任务下载速度限制, 默认:0#max-download-limit=0# 整体上传速度限制, 运行时可修改, 默认:0#max-overall-upload-limit=1M# 单个任务上传速度限制, 默认:0#max-upload-limit=1000# 禁用IPv6, 默认:falsedisable-ipv6=false## 进度保存相关 ### 从会话文件中读取下载任务input-file=/root/.aria2/aria2.session# 在Aria2退出时保存`错误/未完成`的下载任务到会话文件save-session=/root/.aria2/aria2.session# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0#save-session-interval=60## RPC相关设置 ### 启用RPC, 默认:falseenable-rpc=true# 允许所有来源, 默认:falserpc-allow-origin-all=true# 允许非外部访问, 默认:falserpc-listen-all=true# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同#event-poll=select# RPC监听端口, 端口被占用时可以修改, 默认:6800rpc-listen-port=&lt;修改为你要的端口&gt;# 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项rpc-secret=&lt;远程管理密码&gt;# 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-user=&lt;USER&gt;# 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-passwd=&lt;PASSWD&gt;# 是否启用 RPC 服务的 SSL/TLS 加密,# 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接rpc-secure=true# 在 RPC 服务中启用 SSL/TLS 加密时的证书文件(.pem/.crt)rpc-certificate=&lt;CADDY 申请的 TLS 证书文件&gt;# 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件(.key)rpc-private-key=&lt;CADDY 申请的 TLS 证书私钥文件&gt;## BT/PT下载相关 ### 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:truefollow-torrent=true# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999listen-port=51413# 单个种子最大连接数, 默认:55bt-max-peers=500# 打开DHT功能, PT需要禁用, 默认:trueenable-dht=true# 打开IPv6 DHT功能, PT需要禁用enable-dht6=true# DHT网络监听端口, 默认:6881-6999#dht-listen-port=6881-6999# 本地节点查找, PT需要禁用, 默认:false#bt-enable-lpd=true# 种子交换, PT需要禁用, 默认:trueenable-peer-exchange=true# 每个种子限速, 对少种的PT很有用, 默认:50K#bt-request-peer-speed-limit=50K# 客户端伪装, PT需要peer-id-prefix=-TR2770-user-agent=Transmission/2.77# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0seed-ratio=1.5# 强制保存会话, 即使任务已经完成, 默认:false# 较新的版本开启后会在任务完成后依然保留.aria2文件#force-save=false# BT校验相关, 默认:truebt-hash-check-seed=true# 继续之前的BT任务时, 无需再次校验, 默认:falsebt-seed-unverified=true# 保存磁力链接元数据为种子文件(.torrent文件), 默认:false#bt-save-metadata=truebt-tracker=udp://tracker.coppersurfer.tk:6969/announce,udp://tracker.opentrackr.org:1337/announce,udp://tracker.internetwarriors.net:1337/announce,http://tracker.internetwarriors.net:1337/announce,udp://9.rarbg.to:2710/announce,udp://exodus.desync.com:6969/announce,udp://explodie.org:6969/announce,http://explodie.org:6969/announce,udp://tracker.vanitycore.co:6969/announce,udp://public.popcorn-tracker.org:6969/announce,http://tracker.vanitycore.co:6969/announce,udp://mgtracker.org:6969/announce,http://mgtracker.org:6969/announce,udp://tracker1.itzmx.com:8080/announce,udp://ipv4.tracker.harry.lu:80/announce,http://tracker3.itzmx.com:6961/announce,http://tracker1.itzmx.com:8080/announce,udp://tracker.torrent.eu.org:451/announce,udp://tracker.tiny-vps.com:6969/announce,udp://open.stealth.si:80/announce,udp://tracker.port443.xyz:6969/announce,udp://open.demonii.si:1337/announce,udp://denis.stalker.upeer.me:6969/announce,udp://bt.xxx-tracker.com:2710/announce,http://tracker.port443.xyz:6969/announce,http://open.acgnxtracker.com:80/announce,udp://retracker.lanta-net.ru:2710/announce,http://retracker.telecom.by:80/announce,udp://thetracker.org:80/announce,http://torrent.nwps.ws:80/announce,http://0d.kebhana.mx:443/announce,udp://tracker.uw0.xyz:6969/announce,udp://tracker.cypherpunks.ru:6969/announce,https://tracker.fastdownload.xyz:443/announce,https://opentracker.xyz:443/announce,http://tracker.cypherpunks.ru:6969/announce,http://opentracker.xyz:80/announce,http://open.trackerlist.xyz:80/announce,udp://zephir.monocul.us:6969/announce,udp://tracker.ds.is:6969/announce,wss://ltrackr.iamhansen.xyz:443/announce,udp://tracker2.itzmx.com:6961/announce,udp://tracker.tvunderground.org.ru:3218/announce,udp://tracker.toss.li:6969/announce,udp://tracker.swateam.org.uk:2710/announce,udp://tracker.kamigami.org:2710/announce,udp://tracker.iamhansen.xyz:2000/announce,https://2.track.ga:443/announce,http://wegkxfcivgx.chickenkiller.com:80/announce,http://tracker4.itzmx.com:2710/announce,http://tracker2.itzmx.com:6961/announce,http://tracker.tvunderground.org.ru:3218/announce,http://tracker.torrentyorg.pl:80/announce,http://tracker.city9x.com:2710/announce,http://t.nyaatracker.com:80/announce,http://retracker.mgts.by:80/announce,http://open.acgtracker.com:1096/announce,http://node.611.to:9000/announce,wss://tracker.fastcast.nz:443/announce,wss://tracker.btorrent.xyz:443/announce,udp://tracker.justseed.it:1337/announce,udp://packages.crunchbangplusplus.org:6969/announce,https://1337.abcvg.info:443/announce,http://share.camoe.cn:8080/announce,http://fxtt.ru:80/announce</code></pre><p>将 Aria2NG 解压到网站根目录下，从浏览器访问，然后配置对应 Aria2 本地配置项：</p><ul><li>使用协议</li><li>域名 地址 端口</li><li>RPC 密钥</li></ul><p>即可使用。</p><h3 id="Aria2-trackers-all-txt"><a href="#Aria2-trackers-all-txt" class="headerlink" title="Aria2 (trackers_all.txt)"></a>Aria2 (trackers_all.txt)</h3><p>来源：<a href="https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt</a></p><h3 id="MLdonkey-var-lib-mldonkey-downloads-ini"><a href="#MLdonkey-var-lib-mldonkey-downloads-ini" class="headerlink" title="MLdonkey (/var/lib/mldonkey/downloads.ini)"></a>MLdonkey (/var/lib/mldonkey/downloads.ini)</h3><pre><code>allowed_ips = [&quot;0.0.0.0/0&quot;;] shared_directories = [  {     dirname = shared     strategy = all_files     priority = 0};  {     dirname = &quot;&lt;下载文件保存目录&gt;&quot;     strategy = incoming_files     priority = 0};  {     dirname = &quot;incoming/directories&quot;     strategy = incoming_directories     priority = 0};]</code></pre><p>保存目录可以自由修改，需要注意文件夹权限问题。</p><h3 id="MLDonkey-的进一步配置"><a href="#MLDonkey-的进一步配置" class="headerlink" title="MLDonkey 的进一步配置"></a>MLDonkey 的进一步配置</h3><p>在完成上面的配置之后，我们来添加管理员账户并设置一个普通用户。</p><p>同时对 ED2K 服务器列表 server.met 进行一次更新。</p><pre class="line-numbers language-bash"><code class="language-bash">$ telnet localhost 4000<span class="token operator">></span> <span class="token function">useradd</span> admin <span class="token operator">&lt;</span>你的管理员密码<span class="token operator">></span><span class="token operator">></span> quit$ <span class="token function">sudo</span> systemctl restart mldonkey-server$ telnet localhost 4000<span class="token operator">></span> auth admin <span class="token operator">&lt;</span>你的管理员密码<span class="token operator">></span><span class="token operator">></span> d http://ed2k.2x4u.de/v1s4vbaf/max/server.met<span class="token operator">></span> <span class="token function">useradd</span> 普通用户名 普通用户密码<span class="token operator">></span> quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过上述设置之后，你可以通过 <code>http://&lt;你的IP&gt;:4080</code> 来登陆 WebUI 进行下载了。</p><p>注意每次拷贝下载完成的文件之前要去 WebUI 右上角命令框里输入一次 <code>commit</code>.</p><h4 id="MLDonkey-忘记管理员密码"><a href="#MLDonkey-忘记管理员密码" class="headerlink" title="MLDonkey 忘记管理员密码"></a>MLDonkey 忘记管理员密码</h4><p><code>/var/lib/mldonkey/users.ini</code> 里：</p><p>将对应 <code>user_name = admin</code> 的 <code>user_pass</code> 清空后重启服务。</p><h2 id="关于后台进程守护"><a href="#关于后台进程守护" class="headerlink" title="关于后台进程守护"></a>关于后台进程守护</h2><p>建议参考 阮一峰老师的 Systemd 相关教程和 计算器启动 与 后台守护相关文章</p><ul><li><p><a href="http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html" target="_blank" rel="noopener">Linux 后台守护</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" rel="noopener">计算机是如何启动的</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html" target="_blank" rel="noopener">Linux 是如何启动的</a></p></li></ul><blockquote><p>Unix 哲学: Keep simple, keep stupid.</p></blockquote><ul><li><p><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">Systemd Commands</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html" target="_blank" rel="noopener">Systemd Services</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2018/03/systemd-timer.html" target="_blank" rel="noopener">Systemd Timer (You could also use crontab)</a></p></li></ul><p>如果你想学习更多的内容，也欢迎你前往 <a href="https://wiki.archlinux.org/" target="_blank" rel="noopener">Arch Linux Wiki</a> 那里有最详细的人类友好型文档，Arch Wiki 中的大多数内容对基于 Systemd 的发行版均是适用的。</p><h1 id="CDN-中转加速"><a href="#CDN-中转加速" class="headerlink" title="CDN 中转加速"></a>CDN 中转加速</h1><h2 id="准备域名"><a href="#准备域名" class="headerlink" title="准备域名"></a>准备域名</h2><p>如果你还没有域名，你需要注册一个域名，个人推荐 <a href="https://www.namesilo.com/register.php?rid=bd46d72xg" target="_blank" rel="noopener">NameSilo</a> ，便宜，附送 WHOIS 隐私保护，支持支付宝。</p><p>然后建议将域名托管到 <a href="https://dns.he.net" target="_blank" rel="noopener">https://dns.he.net</a> ，分别添加一个指向 @ 和 www 的 A 记录。再添加一个 cf_www 和 回源二级域名 的 A 记录。</p><p>注册一个 Cloudflare 账户，注册完成后不做任何配置。</p><h2 id="CNAME-接入-Cloudflare-加速"><a href="#CNAME-接入-Cloudflare-加速" class="headerlink" title="CNAME 接入 Cloudflare 加速"></a>CNAME 接入 Cloudflare 加速</h2><ol><li>寻找一家 Cloudflare Partner，并确保您的域名 <strong>没有</strong> 在 Cloudflare 注册过或正在处于 Cloudflare 服务之下。</li><li>按照提示添加域名，之后按照 Partner 提示设置 www 记录的回源地址为 cf_www 地址。</li><li>添加一个 CDN 加速域名，此 CDN 加速域名的回源地址指向 回源二级域名 地址。</li><li>前往您的域名托管商，本例中是 HE，添加一个 CNAME 记录，从 CDN 加速域名 指向 <code>cdn.cf-a.x-gslb.com</code> 或者 <code>cdn.cf-b.x-gslb.com</code> 。</li><li>通过 CDN 加速域名下载文件即可。</li></ol><h1 id="完"><a href="#完" class="headerlink" title="完"></a>完</h1><p>还有问题？请使用评论框。</p><p>公告：本站评论 <strong>不对</strong> 使用中国大陆 IP 地址访问本站的用户开放。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://caddyserver.com/docs" target="_blank" rel="noopener">Caddy Server Documentation</a></li><li><a href="https://doub.io/goflyway-jc3/" target="_blank" rel="noopener">Doubi Location</a></li><li><a href="https://www.dcc.cat/cloudflare/" target="_blank" rel="noopener">Cloudflare $5000 Route</a></li><li><a href="https://dns.he.net/" target="_blank" rel="noopener">HE.net DNS</a></li><li><a href="https://doub.io/jzzy-3/" target="_blank" rel="noopener">Caddy Filemanager</a></li><li><a href="https://doub.io/shell-jc4/" target="_blank" rel="noopener">Aria 2 Onekey Script</a></li><li><a href="https://github.com/mayswind/AriaNg" target="_blank" rel="noopener">AriaNG WebUI</a></li><li><a href="http://mldonkey.sourceforge.net/Allowed_ips" target="_blank" rel="noopener">MLDonkey Config</a></li><li><a href="https://secure.hostsolutions.ro/aff.php?aff=513&amp;pid=271" target="_blank" rel="noopener">Hostsolutions Anti-DMCA VPS</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;CAMAL 离线下载套件，顾名思义：Caddy + AriaNG + Mldonkey(ED2K) + Aria2(BT+PT+HTTP+F
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://www.kmahyyg.xyz/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>KMP 与 BF 字符串模式匹配算法简析</title>
    <link href="https://www.kmahyyg.xyz/2018/KMP-BF-DataStru/"/>
    <id>https://www.kmahyyg.xyz/2018/KMP-BF-DataStru/</id>
    <published>2018-10-17T13:29:29.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串模式匹配算法"><a href="#字符串模式匹配算法" class="headerlink" title="字符串模式匹配算法"></a>字符串模式匹配算法</h1><p>这里讨论两种常见的字符串模式匹配算法，不讨论字符串的预处理。</p><p>关于对字符串进行搜索，请参考 <a href="https://zh.m.wikipedia.org/wiki/Boyer-Moore%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Boyer-Moore 字符串搜索算法 (Wikipedia CN)</a></p><p>另外建议大家阅读 [Sunday 算法]</p><h2 id="BF-算法-Brute-Force"><a href="#BF-算法-Brute-Force" class="headerlink" title="BF 算法 (Brute Force)"></a>BF 算法 (Brute Force)</h2><p>返回子串 Ptn 在主串 Tag 的第 pos 个字符后(含第 pos 个位置)第一次出现的位置，若不存在，则返回 -1，这里的位置全部以从 0 开始计算为准，其中 T 非空，0 &lt;= pos &lt;= Tlen。</p><p>使用 i 标记当前在 Tag 中匹配的字符的位置，初始值为 pos。 使用 j 标记 Ptn 中正在等待比较的位置，初始值为 0,下同。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>Tag<span class="token punctuation">,</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>Ptn<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即对 Tag 的每一个字符与 Ptn 的字符进行逐字比较：</p><ul><li>若完整匹配则返回匹配成功的 pos 值。</li><li>匹配过程中，对当前的 pos 值对应位置之后的每一字符进行 Ptn 的匹配，出现不符合的情况，则将 i 置为 pos + 1，j 置为 0；从当前 pos 值对应的下一个字符开始从头对 Ptn 进行匹配。</li><li>若扫描完整个 Tag 都无法匹配，返回 -1.</li></ul><p>该算法在最坏情况下的时间复杂度为 O(len(P)*len(T))，另外该算法的空间复杂度为 O(1)。</p><h2 id="KMP-算法-Kruth-Morris-Pratt"><a href="#KMP-算法-Kruth-Morris-Pratt" class="headerlink" title="KMP 算法 (Kruth-Morris-Pratt)"></a>KMP 算法 (Kruth-Morris-Pratt)</h2><p>上述算法的时间复杂度为乘积关系，是由于索引指针回溯引起的，针对上述不足，有了 KMP 算法。 KMP 算法的时间复杂度为 O(len(P)+len(T))，空间复杂度为 O(len(P))。这个算法改进的地方在于，不需要过度回溯索引指针 i，而是利用部分匹配结果尽可能的向远滑动，继续进行回溯。</p><h3 id="算法示例"><a href="#算法示例" class="headerlink" title="算法示例"></a>算法示例</h3><p>Step 0: 比较开始。</p><pre><code>     00000000001111111111222i:   01234567890123456789012Tag: ABC ABCDAB ABCDABCDABDEPtn: ABCDABDj:   0123456</code></pre><p>Step 1: 从头比较，比较到 Tag[3] = ‘ ‘ 时发现与 Ptn[3] = ‘D’ 不符。我们已知 Tag[1~3] 与 Ptn[0] 不符，接下来略过这些字符，令 i = 4, j = 0</p><pre><code>     00000000001111111111222i:   01234567890123456789012Tag: ABC ABCDAB ABCDABCDABDEPtn:     ABCDABDj:       0123456</code></pre><p>Step 2：这时我们继续检索 Tag，发现仍不匹配，但是 Tag[8~9] 对应的 ‘AB’ 出现了两次，故可以作为下次比较的起始点，我们令 i = 8, j = 2，继续比较。</p><pre><code>     00000000001111111111222i:   01234567890123456789012Tag: ABC ABCDAB ABCDABCDABDEPtn:         ABCDABDj:           0123456</code></pre><p>Step 3：到 i = 10 时，此时我们放弃比较重复内容，比较 i = 10 与 j = 2 发现出现不符。接下来，由于 ‘AB’ 重复出现，我们从 i = 11, j = 0 开始比较。</p><pre><code>     00000000001111111111222i:   01234567890123456789012Tag: ABC ABCDAB ABCDABCDABDEPtn:            ABCDABDj:              0123456</code></pre><p>Step 4：到 i = 17, j = 6 出现不相同异常，我们采取一贯的做法，令 i = 15, j = 2 继续搜索。</p><pre><code>     00000000001111111111222i:   01234567890123456789012Tag: ABC ABCDAB ABCDABCDABDEPtn:                ABCDABDj:                  0123456</code></pre><p>Step 5：此时我们找到完全匹配的字符串，初始位置为 15, 返回 i。比较结束。</p><h3 id="失配函数"><a href="#失配函数" class="headerlink" title="失配函数"></a><strong>失配函数</strong></h3><p>特殊情况：当一个失配出现在模式串的此次匹配最开始，此时无法回退，我们置 j = -1，跳到模式串的开头字符。</p><p>关键：建立 next 表。</p><h4 id="理清匹配过程"><a href="#理清匹配过程" class="headerlink" title="理清匹配过程"></a>理清匹配过程</h4><p>假设现在文本串 Tag 匹配到 i 位置，模式串 Ptn 匹配到 j 位置：</p><ul><li>如果 j == -1 或当前字符匹配成功（即 Tag[i] == Ptn[j]），都令 i++，j++，继续匹配下一个字符；</li><li>如果当前字符匹配失败（即 Tag[i] != Ptn[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串 Ptn 相对于文本串 Tag 向右移动了 (j - next [j]) 位。<br>换言之，当匹配失败时，模式串向右移动的位数为： <strong>失配字符所在位置 - 失配字符对应的 next 值（next 数组的求解会在下文中详细阐述），即移动的实际位数为：(j - next[j])</strong> ，且此值大于等于 1。</li></ul><p>很快，你也会意识到 next 数组各值的含义：代表当前字符之前的字符串中，有多大长度的相同前缀后缀。例如如果 next [j] = k，代表 j 之前的字符串中有最大长度为 k 的相同前缀后缀。</p><ul><li>这也意味着在某个字符失配时，该字符对应的 next 值会告诉你下一步匹配中，模式串应该跳到哪个位置（跳到 next [j] 的位置）。如果 next [j] 等于 0，则跳到模式串的开头字符，若 next [j] = k 且 k &gt; 0，代表下次匹配跳到 j 之前的某个字符，而不是跳到开头，且具体跳过了 k 个字符。</li></ul><p>这里，我们明确一点，next 表的产生实际只与 <strong>模式串及其子串</strong> 有关。</p><h4 id="关于-Next-表的建立"><a href="#关于-Next-表的建立" class="headerlink" title="关于 Next 表的建立"></a>关于 Next 表的建立</h4><ol><li>寻找前缀后缀的公共元素最大长度</li></ol><p>对于 Ptn = p0 p1 … pj ，寻找 Ptn 中长度最大且相等的前缀和后缀。若存在 p0 p1 … pk = p(j-k) p(j-k+1)… pj，那么在包含 pj 的模式串中有最大长度为 k+1 的相同前缀和后缀。</p><ol start="2"><li>求 next 数组</li></ol><p>next 数组考虑的是除当前字符外的最长相同前缀后缀，所以通过第 ① 步骤求得各个前缀后缀的公共元素的最大长度后，只要稍作变形即可：将第 ① 步骤中求得的值整体右移一位，然后初值赋为 -1 。</p><ol start="3"><li>根据 next 数组进行匹配 </li></ol><p>匹配失配，j = next[j] ，模式串向右移动 j - next[j] 位。即当 模式串的后缀 p(j-k) p(j-k+1) … p(j-1) 和 源串 s(i-k) s(i-k+1) … s(i-1) 匹配成功，但最后一位 pj 和 si 匹配失败的时候，因为 next[j] = k，等价于 <strong>在不包含 pj 的模式串中有最大公共长度为 k 的前缀后缀，即 p0 p1 … p(k-1) = p(j-k+) p(j-k+1) … p(j-1)</strong> ，接下来我们令 j = next[j] ，从而让字符串右移 next[j] 位，此时模式串的最大长度公共前缀 p0 p1 … p(k-1) 对应这 s(i-k) s(i-k+1) … s(i-1), 实现了跳过公共前后缀的匹配，直接匹配 pk 和 si 继续匹配。</p><h3 id="学习之后实验"><a href="#学习之后实验" class="headerlink" title="学习之后实验"></a>学习之后实验</h3><pre><code>原字符串 TAG： BBC ABCDAB ABCDABCDABDE匹配模式串 PTN:               ABCDABD</code></pre><ol><li>寻找最长前缀后缀</li></ol><table><thead><tr><th style="text-align:center">子串</th><th style="text-align:center">前缀</th><th style="text-align:center">后缀</th><th style="text-align:center">最大公共元素长度</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">/</td><td style="text-align:center">/</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">AB</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">ABC</td><td style="text-align:center">A,AB</td><td style="text-align:center">C,BC</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">ABCD</td><td style="text-align:center">A,AB,ABC</td><td style="text-align:center">D,CD,BCD</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">ABCDA</td><td style="text-align:center"><font color="red">A</font>,AB,ABC,ABCD</td><td style="text-align:center"><font color="red">A</font>,DA,CDA,BCDA</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">ABCDAB</td><td style="text-align:center">A,<font color="red">AB</font>,ABCD,ABCDA</td><td style="text-align:center">B,<font color="red">AB</font>,DAB,CDAB,BCDAB</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">ABCDABD</td><td style="text-align:center">A,AB,ABC,ABCD,ABCDA,ABCDAB</td><td style="text-align:center">D,BD,ABD,DABD,CDABD,BCDABD</td><td style="text-align:center">0</td></tr></tbody></table><p>对应生成的公共元素最大长度表如下：</p><table><thead><tr><th>字符</th><th>A</th><th>B</th><th>C</th><th>D</th><th>A</th><th>B</th><th>D</th></tr></thead><tbody><tr><td>最大前缀后缀公共元素长度</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td>0</td></tr></tbody></table><ol start="2"><li>基于最大长度表生成 NEXT 表</li></ol><p>原来 next 数组的求解竟然如此简单：就是找最大对称长度的前缀后缀，然后整体右移一位，初值赋为-1（当然，你也可以直接计算某个字符对应的next值，就是 <strong>看这个字符之前的字符串中有多大长度的相同前缀后缀</strong>）</p><table><thead><tr><th>模式串子串</th><th>A</th><th>B</th><th>C</th><th>D</th><th>A</th><th>B</th><th>D</th></tr></thead><tbody><tr><td>NEXT</td><td>-1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td></tr></tbody></table><blockquote><p>备注：这里其实 next[A0] == -1，意在告诉程序当一开始模式串第一个字符与文本串就不匹配时，可以放弃此次匹配，直接将模式串不断右移一位开始下一次匹配。</p></blockquote><ol start="3"><li>初始匹配</li></ol><pre><code>原字符串 TAG： BBC ABCDAB ABCDABCDABDE匹配模式串 PTN:    ABCDABD</code></pre><p>这里，我们从一开始就发现没有匹配的字符，于是不断后移一位。移动到 i = 4 时，与第五个字符 A 匹配成功，接下来，一直向下匹配，匹配到 j = 6 （字母 D2）时，发生失配。这时将模式串后移，后移 j = j - next[D2] = 6 - 2 = 4 位。</p><ol start="4"><li>第二次匹配</li></ol><pre><code>原字符串 TAG： BBC ABCDAB ABCDABCDABDE匹配模式串 PTN:        ABCDABD</code></pre><p>这里，移动到 i = 8 时，与第九个字符 A 匹配成功，接下来，一直向下匹配，匹配到 j = 2 （字母 C）时，发生失配。这时将模式串后移，后移 j = j - next[C] = 2 - 0 = 2 位。</p><ol start="5"><li>第三次匹配， (TAG[10] = ‘ ‘) != (PTN[0] == ‘A’)，后移 j = j - next[A1] = 0 - (-1) = 1 位。</li></ol><pre><code>原字符串 TAG： BBC ABCDAB ABCDABCDABDE匹配模式串 PTN:          ABCDABD</code></pre><ol start="6"><li>第四次匹配， (TAG[17] = ‘C’) != (PTN[6] == ‘D’)，后移 j = j - next[D2] = 6 - 2 = 4 位。</li></ol><pre><code>原字符串 TAG： BBC ABCDAB ABCDABCDABDE匹配模式串 PTN:           ABCDABD</code></pre><ol start="7"><li>第五次匹配， 匹配成功。</li></ol><pre><code>原字符串 TAG： BBC ABCDAB ABCDABCDABDE匹配模式串 PTN:               ABCDABD</code></pre><h3 id="关于逍爷的讲解"><a href="#关于逍爷的讲解" class="headerlink" title="关于逍爷的讲解"></a>关于逍爷的讲解</h3><p>试比较：</p><p>失配时，模式串向右移动的位数为：失配字符所在<strong>位置</strong> - 失配字符对应的 next 值</p><p>失配时，模式串向右移动的位数为：<strong>已匹配字符数 - 失配字符的上一位字符所对应的最大长度值</strong></p><p>其实二者等价，只不过讲法不同罢了。</p><p>根据《最大长度表》，失配时，模式串向右移动的位数 = 已经匹配的字符数 - 失配字符的上一位字符的最大长度值。</p><p>而根据《next 数组》，失配时，模式串向右移动的位数 = 失配字符的位置 - 失配字符对应的 next 值。</p><p>其中，从 0 开始计数时，失配字符的位置 = 已经匹配的字符数（失配字符不计数），而失配字符对应的next 值 = 失配字符的上一位字符的最大长度值，两相比较，结果必然完全一致。</p><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><h3 id="BF"><a href="#BF" class="headerlink" title="BF"></a>BF</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ViolentMatch</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> sLen <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> pLen<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//①如果当前字符匹配成功（即 Tag[i] == Ptn[j]），则 i++，j++    </span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//②如果失配（即 Tag[i]! = Ptn[j]），令i = i - (j - 1)，j = 0    </span>            i <span class="token operator">=</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//匹配成功，返回模式串 Ptn 在文本串 Tag 中的位置，否则返回 -1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> pLen<span class="token punctuation">)</span>        <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">KmpSearch</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> sLen <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> pLen<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//①如果当前字符匹配成功（即 Tag[i] == Ptn[j]），都令 i++，j++    </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//②如果当前字符匹配失败（即 Tag[i] != Ptn[j]），则令 i 不变，j = next[j]    </span>            <span class="token comment" spellcheck="true">//next[j]即为j所对应的next值      </span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> pLen<span class="token punctuation">)</span>        <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改进后的-Next-数组的递归生成"><a href="#改进后的-Next-数组的递归生成" class="headerlink" title="改进后的 Next 数组的递归生成"></a>改进后的 Next 数组的递归生成</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">GetNextval</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> pLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//p[k]表示前缀，p[j]表示后缀  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token operator">++</span>k<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//较之前next数组求法，改动在下面4行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>                next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//之前只有这一行</span>            <span class="token keyword">else</span>                <span class="token comment" spellcheck="true">//因为不能出现p[j] = p[(next[j])]，所以当出现时需要继续递归，k = next[k] = next[next[k]]</span>                next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            k <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拓展延伸：-Sunday-算法"><a href="#拓展延伸：-Sunday-算法" class="headerlink" title="拓展延伸： Sunday 算法"></a>拓展延伸： Sunday 算法</h2><h3 id="Boyer-Moore-算法"><a href="#Boyer-Moore-算法" class="headerlink" title="Boyer-Moore 算法"></a>Boyer-Moore 算法</h3><p>略显复杂，略去不提，看文章开头有 Wikipedia 链接，也是一个改进算法。</p><p>该算法从模式串的尾部开始匹配，且拥有在最坏情况下O(N)的时间复杂度。在实践中，比KMP算法的实际效能高。</p><p>BM算法定义了两个规则：</p><p>坏字符规则：当文本串中的某个字符跟模式串的某个字符不匹配时，我们称文本串中的这个失配字符为坏字符，此时模式串需要向右移动，移动的位数 = 坏字符在模式串中的位置 - 坏字符在模式串中最右出现的位置。此外，如果”坏字符”不包含在模式串之中，则最右出现位置为-1。</p><p>好后缀规则：当字符失配时，后移位数 = 好后缀在模式串中的位置 - 好后缀在模式串上一次出现的位置，且如果好后缀在模式串中没有再次出现，则为-1。</p><h3 id="Sunday-算法"><a href="#Sunday-算法" class="headerlink" title="Sunday 算法"></a>Sunday 算法</h3><p>上文中，我们已经介绍了 <code>KMP</code> 算法和 <code>BM</code> 算法，这两个算法在最坏情况下均具有线性的查找时间。但实际上， <code>KMP</code> 算法并不比最简单的 <code>C</code> 库函数 <code>strstr()</code> 快多少，而 <code>BM</code> 算法虽然通常比 <code>KMP</code> 算法快，但 <code>BM</code> 算法也还不是现有字符串查找算法中最快的算法，本文最后再介绍一种比 <code>BM</code> 算法更快的查找算法即 <code>Sunday</code> 算法。</p><p>Sunday 算法由 Daniel M.Sunday 在 1990 年提出，它的思想跟 BM 算法很相似：</p><p>只不过 Sunday 算法是从前往后匹配，在匹配失败时关注的是文本串中参加匹配的最末位字符的下一位字符。如果该字符没有在模式串中出现则直接跳过，即移动位数 = 匹配串长度 + 1；否则，其移动位数 = 模式串中最右端的该字符到末尾的距离 + 1。</p><p>下面举个例子说明下 Sunday 算法。假定现在要在文本串 “substring searching algorithm” 中查找模式串 “search” 。</p><ol><li>刚开始时，把模式串与文本串左边对齐：</li></ol><pre><code>substring searching algorithmsearch^</code></pre><ol start="2"><li>结果发现在第 2 个字符处发现不匹配，不匹配时关注文本串中参加匹配的最末位字符的下一位字符，即标粗的字符 i，因为模式串 search 中并不存在 i，所以模式串直接跳过一大片，向右移动位数 = 匹配串长度 + 1 = 6 + 1 = 7，从 i 之后的那个字符（即字符 n ）开始下一步的匹配，如下图：</li></ol><pre><code>substring searching algorithm　　　     search　　　　 ^</code></pre><ol start="3"><li>结果第一个字符就不匹配，再看文本串中参加匹配的最末位字符的下一位字符，是 ‘r’ ，它出现在模式串中的倒数第 3 位，于是把模式串向右移动 3 位（ r 到模式串末尾的距离 + 1 = 2 + 1 = 3 ），使两个 ‘r’ 对齐，如下：</li></ol><pre><code>substring searching algorithm　　　　        search　　　　　　　   ^</code></pre><ol start="4"><li>匹配成功。</li></ol><p>回顾整个过程，我们只移动了两次模式串就找到了匹配位置，缘于 Sunday 算法每一步的移动量都比较大，效率很高。完。</p><h2 id="一点点碎碎念"><a href="#一点点碎碎念" class="headerlink" title="一点点碎碎念"></a>一点点碎碎念</h2><p>学院现在的课程设置问题非常严重，图灵机、有限状态自动机、算法优化、通信原理、量子物理各方面的课程缺乏严重，导致学生学习专业课程时出现了极大的知识断层，课外各种杂事颇多，时间非常紧张，需要学生花大量课后时间充电。</p><p>本来计算机相关行业，知识更新速度快，入门门槛高、相对复杂，基础知识要求广泛，现在却这样，大学真的很忙。每天都是高压锅生活。为了光明的未来和亲爱的钰，还是更加努力吧！</p><p>关于昨天的汇编文章：其实用什么平台并不重要，作为入门者，你需要明白的只是老师为什么让你这样做，这样做背后的计算机原理是什么。在具体实践上，如何把本来 Windows 上的东西尽量在 Linux 上完美复现或者找到替代品。这样就好了。我知道 Windows 开发的公司仍然是绝大多数，但是在 Linux 平台写代码给了很多人一种专注于代码实现本身的感觉（虽然初始状态的学习曲线非常抖），不用像 Windows 一样各种折腾环境。更何况，Arch Linux 的系统设计注重代码正确、优雅和极简主义，期待用户能够愿意去理解系统的操作，这样的系统正是我们有一点点基础的初学者所需要的。日常用 Linux 多学点底层的东西同时又提高效率又何妨？</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><p><a href="https://blog.csdn.net/ns_code/article/details/19286279" target="_blank" rel="noopener">https://blog.csdn.net/ns_code/article/details/19286279</a></p></li><li><p><a href="https://zh.m.wikipedia.org/zh-cn/%E5%85%8B%E5%8A%AA%E6%96%AF-%E8%8E%AB%E9%87%8C%E6%96%AF-%E6%99%AE%E6%8B%89%E7%89%B9%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">https://zh.m.wikipedia.org/zh-cn/%E5%85%8B%E5%8A%AA%E6%96%AF-%E8%8E%AB%E9%87%8C%E6%96%AF-%E6%99%AE%E6%8B%89%E7%89%B9%E7%AE%97%E6%B3%95</a></p></li><li><p><a href="http://saturnman.blog.163.com/blog/static/5576112010969957130/" target="_blank" rel="noopener">http://saturnman.blog.163.com/blog/static/5576112010969957130/</a></p></li><li><p><a href="https://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">https://blog.csdn.net/v_july_v/article/details/7041827</a>    Strongly Recommended</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串模式匹配算法&quot;&gt;&lt;a href=&quot;#字符串模式匹配算法&quot; class=&quot;headerlink&quot; title=&quot;字符串模式匹配算法&quot;&gt;&lt;/a&gt;字符串模式匹配算法&lt;/h1&gt;&lt;p&gt;这里讨论两种常见的字符串模式匹配算法，不讨论字符串的预处理。&lt;/p&gt;
&lt;p&gt;关于对字
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://www.kmahyyg.xyz/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>YNU - 汇编语言程序设计实验报告</title>
    <link href="https://www.kmahyyg.xyz/2018/ASM-exp-report/"/>
    <id>https://www.kmahyyg.xyz/2018/ASM-exp-report/</id>
    <published>2018-10-16T13:24:31.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unrelated"><a href="#Unrelated" class="headerlink" title="Unrelated"></a>Unrelated</h1><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>由于过去不努力和各种原因，导致没有选到汇编课程。旁听课程，保存下了逍爷的 PPT，积极参与实验和旁听课程。</p><p>这就是我现在能做的，感谢王逍老师的辛勤付出。感谢我亲爱的钰帮我做的一切，么么哒！</p><p>也感谢 RainbowTrash23333 一直以来对我的帮助，没有他们，就没有现在的我。</p><p>最后感谢 #rich 的刘老板提供的已备案域名用于本站所有图片和其他资源文件的 OSS 存储与 CDN 加速。</p><p>感谢 Github Pages 提供的 Hosting 服务。</p><p>废话不多说，上实验报告。这里由于并不提交正式的实验报告，就只是简单记录下实验步骤和踩的坑了，</p><p>用于抄袭后交作业者请自觉绕道，发现必将严惩。</p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>本篇文章授权 采用 CC BY-NC-ND 3.0 Unported 协议，禁止转载。</p><h2 id="Experiment-Environment"><a href="#Experiment-Environment" class="headerlink" title="Experiment Environment"></a>Experiment Environment</h2><p>Windows? 不可能的，不到 Linux 下完全没有替代工具或者我完全没时间折腾的时候我是打死都不会用的。</p><blockquote><p>Linus Torvalds: Your PC is like air-conditioning — it becomes useless when you open Windows.</p></blockquote><p>So: 实验虚拟机全部采用 KVM 搭建，目前有 MSDOS 7.11 和 Windows XP SP3.</p><pre><code>                   -`                    kmahyyg@PatrickY                   .o+`                   ----------------                  `ooo/                   OS: Arch Linux x86_64                 `+oooo:                  Host: Lenovo XiaoXin CHAO 7000                `+oooooo:                 Kernel: 4.18.14-arch1-1-ARCH                -+oooooo+:                Uptime: 1 hour, 25 mins              `/:-:++oooo+:               Packages: 1626 (pacman)             `/++++/+++++++:              Shell: zsh 5.6.2            `/++++++++++++++:             Resolution: 1920x1080, 1920x1080           `/+++ooooooooooooo/`           DE: KDE          ./ooosssso++osssssso+`          WM: KWin         .oossssso-````/ossssss+`         WM Theme: Arc-OSX-Dark-Transparent        -osssssso.      :ssssssso.        Theme: Breeze [KDE], deepin [GTK2/3]       :osssssss/        osssso+++.       Icons: Macos-sierra-CT-0.8.1 [KDE], appmenu-gtk-module [GTK2], deepin [GTK3]      /ossssssss/        +ssssooo/-       Terminal: konsole    `/ossssso+/:-        -:/+osssso+-     Terminal Font: Hack [simp] 11   `+sso+:-`                 `.-/+oso:    CPU: Intel i5-7200U (4) @ 3.100GHz  `++:.                           `-/+/   GPU: NVIDIA GeForce 940MX  .`                                 `/   GPU: Intel HD Graphics 620                                          Memory: 2296MiB / 7905MiB </code></pre><h1 id="Experiment-1"><a href="#Experiment-1" class="headerlink" title="Experiment 1"></a>Experiment 1</h1><h2 id="实验用到的软件环境"><a href="#实验用到的软件环境" class="headerlink" title="实验用到的软件环境"></a>实验用到的软件环境</h2><p>gcc (GCC) 8.2.1 20180831</p><p>Kate - Advanced Text Editor Version 18.08.2</p><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>C 语言编写： </p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> x<span class="token operator">=</span>学号后三位<span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token operator">=</span>学号后去掉最后一位的后四位<span class="token punctuation">;</span><span class="token keyword">int</span> z<span class="token operator">=</span>x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后编译生成 ASM 文件，查看并尝试解释 ASM 与 C 源代码的关系。</p><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><p>C语言:</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">152</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 数据已经经过变换处理以保护隐私</span>        <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">2011</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> z<span class="token operator">=</span>x<span class="token operator">+</span>y<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译： <code>gcc -O -fverbose-asm -S -fno-pic -fno-plt -fno-pie -nodefaultlibs -std=c99 exp1.c -o exp1.noplt.s</code></p><p>得到的 ASM 文件：</p><pre class="line-numbers language-asm6502"><code class="language-asm6502">        .file   "exp1.c"# GNU C99 (GCC) version 8.2.1 20180831 (x86_64-pc-linux-gnu)#       compiled by GNU C version 8.2.1 20180831, GMP version 6.1.2, MPFR version 4.0.1, MPC version 1.1.0, isl version isl-0.19-GMP# Here is the default compiler options which was builtin while compiler compile itself. Just delete them to reduce the text size.        .text        .section        .rodata.str1.1,"aMS",@progbits,1.LC0:        .string "%d %d %d"        .text        .globl  main        .type   main, @functionmain:.LFB3:        .cfi_startproc        subq    $8, %rsp        #,               ; 修改堆栈基址寄存器，进入过程。        .cfi_def_cfa_offset 16# exp1.c:7:     printf("%d %d %d",x,y,z);        movl    $2163, %ecx     #,               ; 根据显示顺序，编译器预先完成加法计算后写入 ASM， 并将数据写入到对应寄存器        movl    $2014, %edx     #,               ; 传递立即数到指定寄存器        movl    $149, %esi      #,        movl    $.LC0, %edi     #,               ; Read-Only Text data to be passed to the function        movl    $0, %eax        #,               ; Pass the beginning address to the EAX register        call    *printf@GOTPCREL(%rip)  #        ; 调用系统标准C语言库中预定义好的 printf 宏实现打印到屏幕，具体请参考 GLIBC 的 stdio 实现# exp1.c:9: }        movl    $0, %eax        #,               ; 0 传入 EAX，保存程序执行得到的返回值        addq    $8, %rsp        #,               ; 自加8 传入 栈基址寄存器 RSP，设置堆栈指针。主要用于实现堆栈平衡，即 程序执行前后 ESP 不变。        .cfi_def_cfa_offset 8        ret                                      ; 使用栈中的数据修改 IP，实现近转移，最终返回父进程。        .cfi_endproc.LFE3:        .size   main, .-main        .ident  "GCC: (GNU) 8.2.1 20180831"        .section        .note.GNU-stack,"",@progbits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验分析"><a href="#实验分析" class="headerlink" title="实验分析"></a>实验分析</h2><p>请参见上方的 ASM 中 <code>;</code> 开头的代码注释。</p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>体验 C 到 ASM 的转化，为之后的反编译和逆向打下基础。</p><h1 id="Experiment-2"><a href="#Experiment-2" class="headerlink" title="Experiment 2"></a>Experiment 2</h1><h2 id="实验用到的软件环境-1"><a href="#实验用到的软件环境-1" class="headerlink" title="实验用到的软件环境"></a>实验用到的软件环境</h2><p>gcc (GCC) 8.2.1 20180831</p><p>Bochs x86 Emulator 2.6.9</p><p>bximage 和 dd 工具</p><p>Kate - Advanced Text Editor Version 18.08.2</p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>练习使用 Bochs 的调试功能，为接下来的调试操作系统或者底层代码做准备。</p><h2 id="实验要求-1"><a href="#实验要求-1" class="headerlink" title="实验要求"></a>实验要求</h2><p>使用 NASM 编译给出的源代码，在计算机启动时打印你的学号。使用 BochsDBG 进行调试。</p><h2 id="实验源代码"><a href="#实验源代码" class="headerlink" title="实验源代码"></a>实验源代码</h2><pre class="line-numbers language-asm6502"><code class="language-asm6502">MOV AX,0xb810            ; move to the screen bufferMOV DS,AX                ; move the base addr to the bufferMOV BYTE[0x00], '2'      ; put the data into the bufferMOV BYTE[0x02], 'A'MOV BYTE[0x04], 'B'MOV BYTE[0x06], 'C'MOV BYTE[0x08], '1'MOV BYTE[0x0A], 'W'      ; student id data hidden for privacy protectionMOV BYTE[0x0C], 'O'MOV BYTE[0x0E], 'R'MOV BYTE[0x10], '1'MOV BYTE[0x12], 'L'MOV BYTE[0x14], 'D'JMP $                    ; loop the above code and done for fatal errorTIMES 510 - ($-$$) DB 0  ; pad remainder of boot sectors with 0DB 0x55,0xAA             ; the standard PC boot signature<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译： <code>nasm ./exp2.asm -fbin -owx -lwx.lst</code></p><p>产生的 wx 文件：<code>DOS/MBR boot sector</code></p><h2 id="实验操作：编译完成后的-BOCHS-导入"><a href="#实验操作：编译完成后的-BOCHS-导入" class="headerlink" title="实验操作：编译完成后的 BOCHS 导入"></a>实验操作：编译完成后的 BOCHS 导入</h2><p><strong>请先查阅 Bochs 手册和对应工具的 manpage 以熟悉基础操作。</strong></p><h3 id="1-写-Bochs-RC-虚拟机启动配置文件"><a href="#1-写-Bochs-RC-虚拟机启动配置文件" class="headerlink" title="1. 写 Bochs RC 虚拟机启动配置文件"></a>1. 写 Bochs RC 虚拟机启动配置文件</h3><p>范例文件请参考： <code>/etc/bochsrc-sample.txt</code></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">floppy_bootsig_check</span><span class="token punctuation">:</span> disabled=1<span class="token key atrule">boot</span><span class="token punctuation">:</span> floppy<span class="token punctuation">,</span> disk<span class="token punctuation">,</span> cdrom<span class="token key atrule">floppya</span><span class="token punctuation">:</span> image="boot.img"<span class="token punctuation">,</span> status=inserted<span class="token key atrule">ata0-master</span><span class="token punctuation">:</span> type=disk<span class="token punctuation">,</span> mode=flat<span class="token punctuation">,</span> path="boot.img"<span class="token punctuation">,</span> cylinders=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后两行二选一，建立 1.44M 镜像。</p><h3 id="2-建立虚拟机磁盘镜像并写入对应的-Boot-Sector"><a href="#2-建立虚拟机磁盘镜像并写入对应的-Boot-Sector" class="headerlink" title="2. 建立虚拟机磁盘镜像并写入对应的 Boot Sector"></a>2. 建立虚拟机磁盘镜像并写入对应的 Boot Sector</h3><p>目的：建立 BOCHS 允许体积的镜像用于虚拟机启动，修改 0 扇区以实现 MBR 启动。</p><ul><li>bximage 创建镜像</li></ul><p>type: fd, size: 1.44, name: boot.img, Done.</p><p>请根据 <code>bximage</code> 的输出修改你的 Bochs RC 文件。</p><ul><li>dd 写入镜像</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">dd</span> if<span class="token operator">=</span>wx.bin of<span class="token operator">=</span>boot.img bs<span class="token operator">=</span>512 count<span class="token operator">=</span>1 conv<span class="token operator">=</span>notrunc oflag<span class="token operator">=</span>direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-启动虚拟机"><a href="#3-启动虚拟机" class="headerlink" title="3. 启动虚拟机"></a>3. 启动虚拟机</h3><pre class="line-numbers language-bash"><code class="language-bash">$ bochs -q -f new.bochsrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="备用：挂载修改镜像"><a href="#备用：挂载修改镜像" class="headerlink" title="备用：挂载修改镜像"></a>备用：挂载修改镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mount</span> ./floppya.img /mnt/floppy/ -o loop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实验结果与分析总结"><a href="#实验结果与分析总结" class="headerlink" title="实验结果与分析总结"></a>实验结果与分析总结</h2><p>源代码相关总结请参见前文。</p><h3 id="Part-1-启动成功"><a href="#Part-1-启动成功" class="headerlink" title="Part 1: 启动成功"></a>Part 1: 启动成功</h3><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-asmexp1.png" alt="STARTUP EXP02"></p><p>踩了很多坑，主要是镜像建立和不截断写入数据。</p><h3 id="Part-2-关于-Bochs-的使用"><a href="#Part-2-关于-Bochs-的使用" class="headerlink" title="Part 2: 关于 Bochs 的使用"></a>Part 2: 关于 Bochs 的使用</h3><p>BIOS 执行完成后，会跳转到 0x7c00 位置，我们使用 <code>b 0x7c00</code> 在这里下断。</p><blockquote><p>BOCHS 简易指南<br>命令 c  运行程序，相当于windbg的g以及OD的F9<br>命令 s  即step，单步执行程序<br>命令 p  单步执行，步过函数<br>命令 q  退出bochs并关闭虚拟机<br>命令 b  下断点命令，如本例中：b 0x7c00<br>命令 blist  显示断点状态<br>命令 watch  显示当前所有读写断点<br>命令 r  显示寄存器的值<br>命令 u  反汇编代码，可设定起始和结束位置<br>命令 info 根据参数不同显示相关信息</p></blockquote><p>接下来交替使用 s 和 p 交替执行，直到 BIOS 加载完成。因为现有知识不足以看清楚 BIOS 加载和启动过程，我们直接使用 c 执行 BIOS 程序直到断点。</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-asmexp2.png" alt="BOCHSDBG EXP02"></p><p>到达断点处，可以看到我们编写的汇编程序源代码。最终会陷入死循环（看起来就是没动静），这时候，如果 Bochs 调试器不处于等待输入状态，则使用 Ctrl-C 跳回解释器，接下来使用 q 命令退出。</p><p>简单调试完成。对应截图中可能涉及隐私泄露的信息已经打码，很抱歉给各位带来的糟糕的体验。 </p><h1 id="Experiment-3"><a href="#Experiment-3" class="headerlink" title="Experiment 3"></a>Experiment 3</h1><h2 id="实验用到的软件环境-2"><a href="#实验用到的软件环境-2" class="headerlink" title="实验用到的软件环境"></a>实验用到的软件环境</h2><p>请参见我 <a href="https://asm.kmahyyg.xyz" target="_blank" rel="noopener">假期的汇编笔记</a></p><h2 id="实验要求-2"><a href="#实验要求-2" class="headerlink" title="实验要求"></a>实验要求</h2><p>在 MSDOS DEBUG 环境中运行汇编语句。</p><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><h3 id="语句准备"><a href="#语句准备" class="headerlink" title="语句准备"></a>语句准备</h3><p>请参考 <a href="https://asminst.kmahyyg.xyz" target="_blank" rel="noopener">Intel Pentium Instruction Set Reference</a></p><h3 id="操作准备"><a href="#操作准备" class="headerlink" title="操作准备"></a>操作准备</h3><p>请参考 <a href="https://asm.kmahyyg.xyz/exps/exp1-dosdbg.html" target="_blank" rel="noopener">DEBUG 实验记录</a><br>请参考 <a href="https://asm.kmahyyg.xyz/exps/exp1-debugref.html" target="_blank" rel="noopener">DEBUG 操作参考文档</a></p><h2 id="实验操作"><a href="#实验操作" class="headerlink" title="实验操作"></a>实验操作</h2><h3 id="验证类"><a href="#验证类" class="headerlink" title="验证类"></a>验证类</h3><p>以下均使用 OP 替代操作码，请根据实验要求自行替换。</p><ol><li>寄存器查看并分析</li></ol><pre class="line-numbers language-asm6502"><code class="language-asm6502">MOV AX,0A95BOP AX,8CA2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>OP</th><th>AX</th><th>OF</th><th>SF</th><th>ZF</th><th>AF</th><th>PF</th><th>CF</th></tr></thead><tbody><tr><td>ADD</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>SUB</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ol start="2"><li>寄存器查看并分析</li></ol><pre class="line-numbers language-asm6502"><code class="language-asm6502">MOV AX,96MOV BX,12OP BL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>OP</th><th>AX</th><th>OF</th><th>SF</th><th>ZF</th><th>AF</th><th>PF</th><th>CF</th></tr></thead><tbody><tr><td>MUL</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>IMUL</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>DIV</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>IDIV</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ol start="3"><li>寄存器查看并分析</li></ol><pre class="line-numbers language-asm6502"><code class="language-asm6502">MOV DX,0B9MOV CL,3OP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>OP</th><th>AX</th><th>OF</th><th>SF</th><th>ZF</th><th>AF</th><th>PF</th><th>CF</th></tr></thead><tbody><tr><td>STC</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>SHR DX,1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>SAR DX,CL</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>SHL DX,CL</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>ROR DX,CL</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>ROL DL,CL</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>RCL DX,CL</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>RCR DL,1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ol start="4"><li>请选择能够转移到 L1 单元的条件转移指令下打勾并分析。</li></ol><pre class="line-numbers language-asm6502"><code class="language-asm6502">MOV AX,?MOV BX,?CMP AX,BXOP L1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>AX</th><th>BX</th><th>JB</th><th>JNB</th><th>JBE</th><th>JA</th><th>JL</th><th>JNL</th><th>JLE</th><th>JG</th></tr></thead><tbody><tr><td>1F52H</td><td>1F52H</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>0FF82H</td><td>007EH</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>58BAH</td><td>020EH</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>09A0H</td><td>1E97H</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>FF5CH</td><td>FF8BH</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>8AEAH</td><td>FC29H</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="编程类"><a href="#编程类" class="headerlink" title="编程类"></a>编程类</h3><ol><li>将下列数组中的第六个数据放在 BL 寄存器中。</li></ol><pre class="line-numbers language-asm6502"><code class="language-asm6502">winder DW 1234H, 5678H, 'AB', 'CD'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>寄存器间接寻址方式： <code>NOP</code></p><p>寄存器相对寻址方式： <code>NOP</code></p><p>基址与变址寻址： <code>NOP</code></p><ol start="2"><li>按要求编写指令</li></ol><p>AX 高三位为 0： <code>NOP</code></p><p>BX 高三位为 1： <code>NOP</code></p><p>CX 高三位取反： <code>NOP</code></p><p>测试 DX 的 D3  位： <code>NOP</code></p><p>AX 与 BX 中不同的位均为 1： <code>NOP</code></p><h2 id="实验结果与分析总结-1"><a href="#实验结果与分析总结-1" class="headerlink" title="实验结果与分析总结"></a>实验结果与分析总结</h2><p>TODO</p><h1 id="临时分割线"><a href="#临时分割线" class="headerlink" title="临时分割线"></a>临时分割线</h1><p>（暂时完结）</p><p>Updated on Wed Oct 31 20:27:09 CST 2018</p><p>Rev.3</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://stackoverflow.com/questions/35762970/jmp-in-nasm-bootloader" target="_blank" rel="noopener">https://stackoverflow.com/questions/35762970/jmp-in-nasm-bootloader</a></p><p><a href="https://stackoverflow.com/questions/137038/how-do-you-get-assembler-output-from-c-c-source-in-gcc" target="_blank" rel="noopener">https://stackoverflow.com/questions/137038/how-do-you-get-assembler-output-from-c-c-source-in-gcc</a></p><p><a href="https://stackoverflow.com/questions/38335212/calling-printf-in-x86-64-using-gnu-assembler" target="_blank" rel="noopener">https://stackoverflow.com/questions/38335212/calling-printf-in-x86-64-using-gnu-assembler</a></p><p><a href="https://stackoverflow.com/questions/37902940/disable-got-in-gcc" target="_blank" rel="noopener">https://stackoverflow.com/questions/37902940/disable-got-in-gcc</a></p><p><a href="https://stackoverflow.com/questions/35762970/jmp-in-nasm-bootloader" target="_blank" rel="noopener">https://stackoverflow.com/questions/35762970/jmp-in-nasm-bootloader</a></p><p><a href="https://www.nasm.us/doc/nasmdo12.html" target="_blank" rel="noopener">https://www.nasm.us/doc/nasmdo12.html</a></p><p><a href="https://www.cnblogs.com/chengxuyuancc/archive/2013/05/13/3076524.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxuyuancc/archive/2013/05/13/3076524.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Unrelated&quot;&gt;&lt;a href=&quot;#Unrelated&quot; class=&quot;headerlink&quot; title=&quot;Unrelated&quot;&gt;&lt;/a&gt;Unrelated&lt;/h1&gt;&lt;h2 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://www.kmahyyg.xyz/tags/Tech/"/>
    
      <category term="School" scheme="https://www.kmahyyg.xyz/tags/School/"/>
    
  </entry>
  
  <entry>
    <title>Baidu OCR Restful API 的几个大坑</title>
    <link href="https://www.kmahyyg.xyz/2018/Baidu-OCRAPI/"/>
    <id>https://www.kmahyyg.xyz/2018/Baidu-OCRAPI/</id>
    <published>2018-09-09T16:14:53.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h1><p>见鬼的百度 OCR API，免费的中文识别率相对好一点的我只知道这个。希望大家多多推荐好用的。</p><p>这垃圾玩意浪费了我半个下午的时间，只因为官网的 Restful API 文档最关键的地方出错了！</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>需要的自取，实测可用。这是通用高精度 OCR 基础版 API 的处理，最终结果直接拼接字符串后保存。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># -*- encoding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">gettoken</span><span class="token punctuation">(</span>apikey<span class="token punctuation">,</span>secretkey<span class="token punctuation">)</span><span class="token punctuation">:</span>    acstk <span class="token operator">=</span> <span class="token string">'https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id='</span> <span class="token operator">+</span> apikey <span class="token operator">+</span> <span class="token string">'&amp;client_secret='</span> <span class="token operator">+</span> secretkey    getacs <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>acstk<span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span><span class="token string">'application/json; charset=UTF-8'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    whocare <span class="token operator">=</span> getacs<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> whocare<span class="token punctuation">[</span><span class="token string">'access_token'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">ocrnow</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    baseurl <span class="token operator">=</span> <span class="token string">'https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic'</span>    query_url <span class="token operator">=</span> baseurl <span class="token operator">+</span> <span class="token string">'?access_token='</span> <span class="token operator">+</span> tokens    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>        data2 <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    datatp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'image'</span><span class="token punctuation">:</span>data2<span class="token punctuation">}</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>query_url<span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span><span class="token string">'multipart/form-data'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>data<span class="token operator">=</span>datatp<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'result.json'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fl1<span class="token punctuation">:</span>        fl1<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">procresu</span><span class="token punctuation">(</span>resultjson<span class="token punctuation">)</span><span class="token punctuation">:</span>    fl1 <span class="token operator">=</span> open<span class="token punctuation">(</span>resultjson<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    dat1 <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>fl1<span class="token punctuation">)</span>    final <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dat1<span class="token punctuation">[</span><span class="token string">'words_result'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        final <span class="token operator">=</span> final <span class="token operator">+</span> i<span class="token punctuation">[</span><span class="token string">'words'</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'result.txt'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp23<span class="token punctuation">:</span>        fp23<span class="token punctuation">.</span>write<span class="token punctuation">(</span>final<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Super-Boom"><a href="#Super-Boom" class="headerlink" title="Super Boom"></a>Super Boom</h1><ol><li>最终上传图片时的 header 应为 <code>headers={&#39;Content-Type&#39;:&#39;multipart/form-data&#39;}</code></li><li>图片只需要 <code>base64.b64encode().decode()</code> ， 不需要 <code>urllib.parse.quote_from_bytes()</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h1&gt;&lt;p&gt;见鬼的百度 OCR API，免费的中文识别率相对好一点的我只知道这个。希望大家多多推荐好用的。&lt;/p
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://www.kmahyyg.xyz/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>Misunderstand? No, I&#39;m a coward.</title>
    <link href="https://www.kmahyyg.xyz/2018/I-hate-myself-a-stranger/"/>
    <id>https://www.kmahyyg.xyz/2018/I-hate-myself-a-stranger/</id>
    <published>2018-08-28T22:37:48.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=283846&auto=1&height=66"></iframe><blockquote><p>人们都希望被别人需要 却往往事与愿违<br>Speak not because it is safe, but because it is right.<br>那已不是你那年的回忆，却依旧是我昨日的记忆。<br>希望 你的未来 不要有人伤害你，否则，我一定不惜代价守护你到底。这一条永远不变。</p></blockquote><h1 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h1><p>本文可能引起您的不适，请做好心理准备。对在这篇文章中提及的人名，均不作处理，保留真名或昵称。<br>本文禁止任何形式的转发、转载、演绎。不适用于本博客的 CC 授权。<br>本文不带任何目的，仅做个人反思，不做挽留、不做道歉、不做任何依据。</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>我是一个真正的 coward 和 bastard.</p><p>最近经历了一段亲密关系的破裂，也发现这个过程中暴露的许多问题。我有种预感，心里的这个障碍会阻碍我一生中所有亲密关系的建立。<br>我的另一种预感是，我 和 你 迟早还会走到一起，不过，生活的事情，谁知道又是怎样呢。</p><p>促使我写这篇文章的根本原因我在上面已经说过，直接原因是一位曾经在 Bot 上帮助过我的大佬： Bennythink 土豆君的这篇博文在这样一个时间点的发布。</p><p>我没有 Benny 那样的勇气直面自己内心最灰暗的那一面，但迟早都要面对。之前的博文，以英文写作的部分，基本都是没办法直面自己的这一部分。但是，现在再不面对，或许，真的，没有未来了。</p><p>男人暴露自己的脆弱的一面并不就变得一无是处，男人有和女人一样的表达内心脆弱的权利。</p><p>相关博文前情提要：</p><ul><li>建议阅读: 生活啊，究竟是为了什么呢 <a href="https://www.bennythink.com/purpose-of-life.html" target="_blank" rel="noopener">https://www.bennythink.com/purpose-of-life.html</a> </li></ul><blockquote><p>插播：上面这篇文章的评论区： 对于刚入社会的年轻人来说，总会有种恐慌，觉得为什么自己没有钱，没有存款。这是现如今社会的一种现状。记住你有你的青春，把青春奉献到什么地方就会从什么地方收获。把自己有限的资源共享在自己的事业中，自己的成长中。坚持到底。你会让你的孩子不会输在起跑线。 对于爱情来说，或许我经历的恰好是一段完美的爱情，从校园到社会，到如今的结婚生子。生活的很幸福，相互理解，相互扶持。最总要的是共同进步，有相同的价值观…或许你之前的没有结果，但这绝不是一个人的问题，是互相的问题。所以这时候就体现出来共同进步的作用。 对于离去这一个话题，我只表达自己的想法。 这就是对于生命的不尊重，对所有人的不负责任。 最后建议，在生活迷茫时，需要的是一群良师益友，能给你正能量。</p></blockquote><ul><li>建议阅读：我与明明 <a href="https://www.bennythink.com/me-and-mingming.html" target="_blank" rel="noopener">https://www.bennythink.com/me-and-mingming.html</a></li><li>看不到希望的未来 <a href="https://www.bennythink.com/hopeless-future.html" target="_blank" rel="noopener">https://www.bennythink.com/hopeless-future.html</a></li><li>一切归于平静 - 开学前的最后一篇博文 <a href="https://www.kmahyyg.xyz/2018/Zoe-I-Departed/">https://www.kmahyyg.xyz/2018/Zoe-I-Departed/</a></li><li>暑假结束 - 我爱的人和爱我的人 <a href="https://www.kmahyyg.xyz/2018/Summer-Holiday-End/">https://www.kmahyyg.xyz/2018/Summer-Holiday-End/</a></li><li>2018 年中 工作总结 <a href="https://www.kmahyyg.xyz/2018/2018-Mid-Work-Summary/">https://www.kmahyyg.xyz/2018/2018-Mid-Work-Summary/</a></li></ul><h1 id="Coward-Bastard-Yes-it’s-myself"><a href="#Coward-Bastard-Yes-it’s-myself" class="headerlink" title="Coward, Bastard, Yes, it’s myself!"></a>Coward, Bastard, Yes, it’s myself!</h1><p>我真是一个彻头彻尾的混蛋，我不敢去面对我的内心。我也这样，伤害了一个把我的心耗尽 ta 的心血捧在手里的人。</p><p>小时候家庭的不和，让我至今心有余悸。我害怕失去，我害怕离别，我害怕那种叫做 陌生 的感觉。那些经历，让我感受到的只有伤害与背叛。这些行为，至今依然在我的面前一遍又一遍、一天又一天的重复上演，所以我从小也就不信任任何人。我害怕，我担心，我不敢哭泣，不敢透露。总想做自己能做的所有，把自己都给那个心里的人，只希望 ta 不要离开，显然，这样只会把 ta 越推越远。那些心理上的伤害，所谓的出发点正确但方式错误，都他妈的给我滚去一边吧！我勉强理解，但绝不原谅！心都是玻璃做的，需要小心翼翼，这颗心，虽然外表坚硬，但只要受到一点点打击，都会从内部产生一段裂痕。当这些裂痕慢慢扩大到无法压抑的时候，也就是一个人崩溃的时候。我已经处在崩溃的边缘。</p><p>我恨自己，恨自己每天都在用所谓的 poker face 伪装，为自己内心的软弱寻找借口。用表面的忙碌，希望遮掩自己的碌碌无为和内心的空虚。内心脆弱，假装表面强大，又有什么用，只会把自己伤的更深。当你在英语课上提出那个问题 “Why you always looks so sad and with the same emotion?” 的时候，我愣了一愣，内心早已决堤。但，毕竟是公共场合，也只能假装敷衍而过。说白了，也就是内心害怕受到一点点伤害，不想让别人知道我的内心如此的不堪一击。我的不信任，我的伪装，已经摧毁了一段又一段可能建立的 <strong>朋友关系（亲密关系是不可能的）</strong> 。直到碰到了你，我知道，我或许应该有希望重新点燃那把内心的火炬。</p><p>我恨自己，恨自己一直想要乞求那么一点点本来就不，也不可能属于我的那一点点关爱。内心缺乏的，也就是渴望的，太过渴望，只有失望。</p><p>我恨自己，恨自己出现在了一个不恰当的地点，不恰当的时间，遇到了一个恰当的人。却把她弄丢，最终连朋友都做不了，只能在宿舍的枕头上默默哭泣。写这篇博文的时候，我也只有手和脑袋在正常工作了。对不起，我对不起你，对不起你的付出，对不起你的一切。也对不起我自己。我只想养一只可爱的小猫，一只可以用她比人类寿命还短许多的一生来陪伴人类的动物，一个我的永久的伴侣和我的家庭成员。曾经看过一个什么东西，是这样写的：“对于你的宠物而言，或许她们只是你的一生的可有可无的一部分，但是，她们却只有你作为她们的一生。”抱歉，我选择用我的一生和我所有的心都奉献给这个把她的一切都给我的朋友。谢谢你，猫咪。如果我真的遇到那只猫咪，当她走后，我还没有遇到那一个正确的人，我估计也就失望到底，送走了我妈之后，也就了此残生。</p><blockquote><p>A true suicide is a paced, disciplined certainty.<br>People pontificate “Suicide is a coward’s act”.<br>Couldn’t be further from the truth.<br>Suicide takes tremendous courage.</p></blockquote><hr><h2 id="收拾下心情，擦擦眼泪，我回来了。"><a href="#收拾下心情，擦擦眼泪，我回来了。" class="headerlink" title="收拾下心情，擦擦眼泪，我回来了。"></a>收拾下心情，擦擦眼泪，我回来了。</h2><p><img src="https://yygc.zzjnyyz.cn/asset_files/hateself1.jpg" alt="cat"></p><p>我恨自己，恨自己不敢面对我内心那个真实而又脆弱的我，不敢把它暴露出来，接受阳光的修复和洗礼。</p><p>我恨自己，恨自己没有办法真的信任一个人。遇到你，我第一次和你说离别的时候。看到你说在图书馆哭了一下午，也终于知道我在你心里的位置的时候，我终于明白了什么叫做有个人在惦记着你，终于明白了什么叫作肝肠寸断。我也决定放下戒备，开始完全无条件的信任一个人。从坦白我的过去开始，终于，在那个夜晚，我还是说出了我一直的心结中的一部分，我的家庭。慢慢信任你的一切。然而，那压不住的不信任的潜在的一天还是来了，我就是想知道你的最终想法，我偶尔撒娇，偶尔卖萌，也只是得到了礼貌性的回复。我和一部分不知道我的过去的朋友说了一些我们之前的一些感情，他们无不被这份感情的纯真感动，但也提醒我潜在的风险，时至今日，这一潜在风险还是成真了。</p><p>说实话，我最终还是爆炸了。我想，我用真心付出了那么多，还是感觉不到任何回应，还是放弃吧。选择了一个如此残暴的方式放弃……非常抱歉……我不想被小心翼翼的捧着，我只想你也能和我撒撒娇、发发脾气，平平淡淡，也就 okay，偶尔也溺爱一下我，我们能在需要的时候互相关心、互相陪伴、共同走过，也就足够了。可惜，貌似还是做不到。我也只能忍痛放下。</p><p>我做的也太过分了一点，明明自己就做得如此糟糕，有什么资格要求别人给予呢？</p><h1 id="Mistrust-is-the-most-harmful-one"><a href="#Mistrust-is-the-most-harmful-one" class="headerlink" title="Mistrust is the most harmful one"></a>Mistrust is the most harmful one</h1><p>谢谢你，此刻，我也只有这几个字，还有，那句欠你一生的 “对不起”。终究，两个脆弱的人是总有那么一些不可能的。毕竟 脆弱的心 容不得 半点 更多 的 伤害。</p><h1 id="FRIENDSHIP-FOREVER"><a href="#FRIENDSHIP-FOREVER" class="headerlink" title="FRIENDSHIP FOREVER"></a>FRIENDSHIP FOREVER</h1><p>让这段我耗尽我此生至今 19 年中我最多的心血的感情，随着那一把心里山火，烧光吧。让 ta 随风而去吧，我知道：我永远无法原谅以这样方式结束这段经历的自己。</p><p>谢谢你，<br>真想和你重新相遇，</p><p>过去的，唉……终究不会再来了，碎掉的心也已经不可能再找回来了。<br>总归是把这些东西写下来了，也算给了自己半个交代。</p><p>我知道在我们身边有几个人是会看这个博客的，也就这样吧。<br>坦白面对自己的最阴暗的一面，<br>也是人生必须的功课。</p><p>隐隐腹痛，难以入睡<br>2018.8.28 夜</p><p>著于 8.29 凌晨，心情 极差<br>真想揪着自己的耳朵对自己大吼：醒醒！</p><p>暂且先这样吧，断断续续写了一些，哪天想起来这段经历有什么感悟，再来 update 吧。<br>Patrick Y.</p><p>对了，答应我，不管什么时候，好好对待自己。算了，我没有立场这样请求……</p><p>UPDATE 1:  惟将终夜长开眼，报答平生未展眉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="School" scheme="https://www.kmahyyg.xyz/tags/School/"/>
    
  </entry>
  
  <entry>
    <title>fix() 与 floor() 函数的区别</title>
    <link href="https://www.kmahyyg.xyz/2018/Matlab-fixVSfloor/"/>
    <id>https://www.kmahyyg.xyz/2018/Matlab-fixVSfloor/</id>
    <published>2018-08-26T23:37:50.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自: <a href="http://blog.sina.com.cn/s/blog_574d08530100p1bp.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_574d08530100p1bp.html</a><br>国内各大博客关的关，停的停，干脆转过来存档<br>版权归原作者所有</p></blockquote><p>fix(x), floor(x) 和 ceil(x) 函数都是对 x 取整，只不过取整方向不同而已。</p><p>这里的方向是以x轴作为横坐标来看的，向右就是朝着正轴方向，向左就是朝着负轴方向。</p><p>fix(x)：向 0 取整（也可以理解为向中间取整）</p><p>floor(x)：向左取整</p><p>ceil(x)：向右取整</p><p>举例：</p><p>4个数：a=3.3、b=3.7、c=-3.3、d=-3.7</p><p>fix(a)=3</p><p>floor(a)=3</p><p>ceil(a)=4</p><hr><p>fix(b)=3</p><p>floor(b)=3</p><p>ceil(b)=4</p><hr><p>fix(c)=-3</p><p>floor(c)=-4</p><p>ceil(c)=-3</p><hr><p>fix(d)=-3</p><p>floor(d)=-4</p><p>ceil(d)=-3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载自: &lt;a href=&quot;http://blog.sina.com.cn/s/blog_574d08530100p1bp.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.sina.com.cn/s
      
    
    </summary>
    
    
      <category term="School" scheme="https://www.kmahyyg.xyz/tags/School/"/>
    
  </entry>
  
  <entry>
    <title>rem() 与 mod() 函数的区别</title>
    <link href="https://www.kmahyyg.xyz/2018/Matlab-remVSmod/"/>
    <id>https://www.kmahyyg.xyz/2018/Matlab-remVSmod/</id>
    <published>2018-08-26T23:34:13.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自: <a href="http://blog.sina.com.cn/s/blog_633750d90100gs8p.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_633750d90100gs8p.html</a><br>国内各大博客关的关，停的停，干脆转过来存档<br>版权归原作者所有</p></blockquote><p>取模（mod）与取余（rem）的区别 —— Matlab 学习笔记【09-11-15】</p><p>本帖来自:数学中国 作者: 木长春 日期: 2009-11-15 19:51</p><p>昨天在学习 Matlab 的数学函数时，教程中提到取模（mod）与取余（rem）是不同的，今天在网上具体查了一下：</p><p>通常取模运算也叫取余运算，它们返回结果都是余数. rem 和 mod 唯一的区别在于:</p><p>x 和 y 的正负号一样的时候，两个函数结果是等同的；当 x 和 y 的符号不同时，rem 函数结果的符号和x的一样，而 mod 和 y 一样。</p><p>这是由于这两个函数的生成机制不同，rem 函数采用 fix 函数，而 mod 函数采用了 floor 函数（这两个函数是用来取整的，fix 函数向 0 方向舍入，floor 函数向无穷小方向舍入）。<br>rem（x，y） 命令返回的是 x-n.<em>y ，如果 y 不等于0，其中的n = fix(x./y)，而 mod(x,y) 返回的是 x-n.</em>y，当 y 不等于 0 时，n = floor(x./y)</p><p>两个异号整数取模取值规律            （当是小数时也是这个运算规律，这一点好像与C语言的不太一样）</p><p>先将两个整数看作是正数，再作除法运算</p><p>①能整除时，其值为0</p><p>②不能整除时，其值=除数×(整商+1)-被除数</p><p>例：mod(36,-10)=-4</p><p>即：36除以10的整数商为3，加1后为4；其与除数之积为40；再与被数之差为（40-36=4）；取除数的符号。所以值为-4。</p><p>例：mod(9,1.2)=0.6</p><p>例：</p><blockquote><blockquote><p>mod(5,2)<br>ans =1                   %“除数”是正，“余数”就是正</p></blockquote></blockquote><blockquote><blockquote><p>mod(-5,2)<br>ans =1</p></blockquote></blockquote><blockquote><blockquote><p>mod(5,-2)<br>ans =-1                  %“除数”是负，“余数‘就是负</p></blockquote></blockquote><blockquote><blockquote><p>mod(-5,-2)<br>ans =-1                  %用rem时，不管“除数”是正是负，“余数”的符号与“被除数”的符号相同</p></blockquote></blockquote><blockquote><blockquote><p>rem(5,2)<br>ans =1                   %“被除数”是正，“余数”就是正</p></blockquote></blockquote><blockquote><blockquote><p>rem(5,-2)<br>ans =1</p></blockquote></blockquote><blockquote><blockquote><p>rem(-5,2)<br>ans =-1                 %“被除数”是负，“余数”就是负</p></blockquote></blockquote><blockquote><blockquote><p>rem(-5,-2)<br>ans =-1</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载自: &lt;a href=&quot;http://blog.sina.com.cn/s/blog_633750d90100gs8p.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.sina.com.cn/s
      
    
    </summary>
    
    
      <category term="School" scheme="https://www.kmahyyg.xyz/tags/School/"/>
    
  </entry>
  
  <entry>
    <title>一切归于平静 - 开学前的最后一篇博文</title>
    <link href="https://www.kmahyyg.xyz/2018/Zoe-I-Departed/"/>
    <id>https://www.kmahyyg.xyz/2018/Zoe-I-Departed/</id>
    <published>2018-08-26T20:05:16.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<p>限于版权保护，只能这样了……<br><a href="https://music.163.com/#/song?id=1304302909" target="_blank" rel="noopener">背景音乐 花粥 / 孟凡明 - 摸摸它</a></p><h1 id="断开连接日"><a href="#断开连接日" class="headerlink" title="断开连接日"></a>断开连接日</h1><p>今天尝试了一次完全断开与世界的连接，由于昨天知道有两个快递要到，还是没有关手机。不过真的是停用了所有社交应用，今天专注于 Code 和 写作，只留下电子邮件的感觉非常好。</p><p>我觉得我们已经过度信息化，信息超载早已成为定局，我们能做的就是尽量适应。同时尽可能地减少注意力的流失。这一点来说 Google 走在了几大厂商的前面，发布了 Digital Wellbeing，虽然目前只能 Pixel 设备使用，但仍然很有帮助，帮助我减少了很多不必要的查看手机的时间。</p><p>完全使用现金支付，在节假日尽可能停用手机是完全可以做到，内心自然也会平静的。这样的确让人感觉非常专注，非常惬意。在魁阁的露台上，品茶、享受着和风，专心地做着自己喜欢的事情，有什么不好的呢？</p><p>所以，我宣布：接下来的这个学期，每周六下课之后就进入 24 h 的断开连接状态！有急事需要找我的朋友，请联系我的私人号码或者发邮件给我，公用号码一样开机，只是会被直接 Ignore 罢了。</p><h1 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h1><p>发现自己还是总算可以算得上能吃辣的了，略开心，不过嘛……吃太多对身体不好，熬夜也一样 XD</p><p>晚上千万不能喝一整瓶的王老吉或者可乐，半夜三更拉肚子，睡不着觉，难受……</p><p>忽然发现，喵喵真的好棒，好想马上就养一只猫，画个大大大的爱心～</p><h1 id="那些看起来美好的事物"><a href="#那些看起来美好的事物" class="headerlink" title="那些看起来美好的事物"></a>那些看起来美好的事物</h1><p>本来懒得措辞了，希望就简短的回复一下，不过估计直接用中文回复的话，会简单地过分，甚至会有 offensive 的味道，想了想，还是用英文吧。</p><p>Dear ZoeCat,</p><p>Hope this letter finds you well. Thanks for your honesty. I’m in such a happy status that you’ve already learnt to be determined. First of all, Although things went as this, I still need the seat at the very first row in each class, hope you will not steal it from me.</p><p>In the rest of the letter, it will be divided into three parts.</p><p>Part one: Q&amp;A time</p><ol><li>Feel unhappy today?</li></ol><blockquote><p>Of course not, I just don’t want anybody to interupt my disconnected day.</p></blockquote><ol start="2"><li>What have you done to make me bored?</li></ol><blockquote><p>Nothing.</p></blockquote><ol start="3"><li>Treat your cold and guessing……?</li></ol><blockquote><p>That’s the most common way I treat each one in “unrelated people” list.</p></blockquote><ol start="4"><li>What’s the best relationship between to similar ones?</li></ol><blockquote><p>Follow your hearts, Try your best and then listen to the fate.</p></blockquote><p>Part two: Thoughts</p><p>I’ve already predicted this result at the very beginning of this summer holiday. But I still want to try to do some emergency saving for this relationship,<br>hope it lasts much longer or keep forever. Remember, I’ve told you some day that I have some hypothesis to prove. That’s it. Some friends have tried to persuade me not to pick you up at the airport. Finally, I still decided to go for it, to do a final confirmation. Saddest, I proved this hypothesis is definitely true. You already answered me several times on your face, so yesterday I told you, “The summer holiday ended, (maybe) see you next semester.” Until today, at the time I heard from you, I released, and knew my future plans still need a cleanup as predicted.</p><p>Part three: My begging</p><p>First of all, I have to inform you that you’ve already been tagged “blacklist” in my soul mate list after I picked you. You are a good friend, but not a good soul mate. I confirmed you are still a good friend. I’m really sad, but life still goes on. So I’m still happy, Cuz unhappy will only cost me all things without any return. Secondly, I hope there will be no more other reply. Thanks for your understanding.</p><p>Hope you have a better day.</p><p>Cordially,<br>Patrick Cat</p><p>Written at Sun Aug 26 20:05:16 CST 2018</p><h2 id="The-reason-I-deleted-her"><a href="#The-reason-I-deleted-her" class="headerlink" title="The reason I deleted her"></a>The reason I deleted her</h2><p>I didn’t want to do that at the very first time. I could understand that you’re protecting yourself. But you know that I won’t do any harm to you. You still chose to cheat me. I chose to exchange with my true heart, but you don’t even understand it a bit. That’s what I can’t stand.</p><p>UPDATE： I just want a little bit response from heart to heart, but so hard to feel. See you. Thanks for your company and honesty.</p><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>YOU ARE NOT PERMITTED TO FORWARD IT ANYWHERE OR POST IT ANYWHERE ELSE (INCLUDING LINK TO THIS POST), NO DERIVS.</p><p>Special License. </p><p>All rights reserved. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;限于版权保护，只能这样了……&lt;br&gt;&lt;a href=&quot;https://music.163.com/#/song?id=1304302909&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;背景音乐 花粥 / 孟凡明 - 摸摸它&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=
      
    
    </summary>
    
    
      <category term="School" scheme="https://www.kmahyyg.xyz/tags/School/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 与 Travis CI 的八字不合</title>
    <link href="https://www.kmahyyg.xyz/2018/Hexo-Travis/"/>
    <id>https://www.kmahyyg.xyz/2018/Hexo-Travis/</id>
    <published>2018-08-26T18:40:58.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h1><p>请查看 <a href="/2018/Sucked-Travis-CI/">见鬼的 Travis CI</a></p><h1 id="第一次查错"><a href="#第一次查错" class="headerlink" title="第一次查错"></a>第一次查错</h1><p>最近的 Travis CI Status Page 显示所有 <code>sudo:required</code> 的 build 均统一出现异常，没有太过在意。<br>联系 Travis CI 客服之后客服让我把 <code>sudo:required</code> 去掉，以便重新把我的 build 引流到 container-based 的另一个基础设施上。<br>后面短时间内的几个 build 均正常，可过了一段时间之后又回到了前面提到的状况当中。</p><h1 id="第二次查错"><a href="#第二次查错" class="headerlink" title="第二次查错"></a>第二次查错</h1><p>客服的反馈是可能是环境变量和 npm 包的安装问题，建议我自查之后尝试把安装 <code>hexo-cli</code> 的参数从 <code>-g --save</code> 变成 <code>--save</code> 或 空。<br>查询 Hexo 官网 之后得知不能去掉 <code>-g</code>，尝试去掉或按照客服建议均无法成功，提示 <code>bash: hexo not found.</code><br>继续邮件反馈给客服，3 天后收到了回信。</p><h1 id="第三次查错"><a href="#第三次查错" class="headerlink" title="第三次查错"></a>第三次查错</h1><p>这一次回复的客服从 Customer Service Specialist 变成了 Travis Builder。她尝试 Fork 了我对应的 Repo 并进行了一系列测试，最终反馈了如下的结果：</p><ul><li>The problem does only happen when the node modules are cached.</li><li>When the cached modules are used, the errors seem to follow an interesting pattern: 1 out of 2 builds fail, consecutively. I think this explains the behavior you’re seeing where restarting the build makes it work. (This: build history list)</li><li>This pattern made me think that the error might be caused by the combination of how cached contents are downloaded in the VM (this is, when the cache is downloaded and set up, I assume the order in which files are included might vary) AND, maybe, the order in which NPM is detecting these cached modules.</li><li>Something I noticed is that, in these builds, NPM install seems to be returning a different output in each of them, where the order of these hexo packages varies.</li><li>I found that, when the packages are installed in the same order, the problem does not happen:</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">install</span><span class="token punctuation">:</span><span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>cli <span class="token punctuation">-</span>g <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>helper<span class="token punctuation">-</span>qrcode<span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>feed<span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>deployer<span class="token punctuation">-</span>git<span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>prism<span class="token punctuation">-</span>plugin<span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>search<span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>sitemap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客服也注意到有人遇到了同样的问题，在 Hexo 的 Issues 里报了 Bug.</p><blockquote><p>As a bit more information, the order in which NPM installs packages, in general, is not deterministic since this shouldn’t be relevant. However, it seems this is causing some differences here and I wonder if this might be related to a Hexo bug, as it happened here: <a href="https://github.com/hexojs/hexo/issues/2076" target="_blank" rel="noopener">https://github.com/hexojs/hexo/issues/2076</a></p></blockquote><p>并建议我按照上面的顺序重写我的 <code>.travis.yml</code> 然后再行尝试。</p><p>最后客服提到了关键的一点 <code>package.json</code> 和 <code>package-lock.json</code>:</p><blockquote><p>Something I also noticed is that your package.json doesn’t seem to be up-to-date with these installed packages, see the updates after the npm installs.</p><p>After deleting the package-lock.json file during the build, I could obtain several working builds in a row and the intermittent failures didn’t appear: See builds. <strong>This seems to reinforce the hypothesis that the way NPM is treating these dependencies, non-deterministically, might be causing these errors.</strong></p></blockquote><p>然而 <code>bash: hexo not found.</code> 的问题解决了， <code>hexo g</code> 生成静态内容的问题又出现了。<br>我先按照建议把 <code>package.json</code> 和 <code>package-lock.json</code> 删除后提交触发 build，然而还是 useless.<br>这一次我把和客服沟通的邮件 po 到了我博客所使用的主题的支持群中，请求开发者帮助。</p><h1 id="最终查错"><a href="#最终查错" class="headerlink" title="最终查错"></a>最终查错</h1><p>在这里，先感谢 @ysc3839 的帮助。</p><p>他建议我先在一个全新的干净环境下本地安装一次依赖之后将 <code>package.json</code> 和 <code>package-lock.json</code> 添加到 Repo 中。</p><p>最后我新建了一个 Cloud9 WebIDE Workspace，新建文件夹并从零开始安装了所有依赖，并使用空内容博客尝试进行了一次 <code>hexo g</code> 操作。测试成功后将 <code>package.json</code> 和 <code>package-lock.json</code> 添加到 原有的 Repo 中覆盖。这一次问题解决了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我做了这几件事来解决这个问题：</p><ul><li>Start a new and clean environment at local</li></ul><p>这一步使用了这些指令：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Create a new folder and input <code>hexo init</code></li><li>Install all the npm dependencies I need (installation commands all<br>coms from <code>.travis.yml</code> )</li></ul><p>这一步使用了这些指令：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo hexo-deployer-git hexo-prism-plugin hexo-helper-qrcode hexo-generator-search hexo-generator-sitemap hexo-generator-feed --save <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Copy the <code>package.json</code> and <code>package-lock.json</code> to the existing repo<br>and replace the old ones</li><li>Change <code>install</code> stage commands.</li></ul><p>最终的 <code>.travis.yml</code> 中的 install stage 是这样的：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">install</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>cli <span class="token punctuation">-</span>g <span class="token punctuation">-</span><span class="token punctuation">-</span>save  <span class="token punctuation">-</span> npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>问题顺利解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前因&quot;&gt;&lt;a href=&quot;#前因&quot; class=&quot;headerlink&quot; title=&quot;前因&quot;&gt;&lt;/a&gt;前因&lt;/h1&gt;&lt;p&gt;请查看 &lt;a href=&quot;/2018/Sucked-Travis-CI/&quot;&gt;见鬼的 Travis CI&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;第一
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://www.kmahyyg.xyz/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>暑假结束 - 我爱的人和爱我的人</title>
    <link href="https://www.kmahyyg.xyz/2018/Summer-Holiday-End/"/>
    <id>https://www.kmahyyg.xyz/2018/Summer-Holiday-End/</id>
    <published>2018-08-18T07:59:43.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28445526&auto=1&height=66"></iframe><blockquote><p>I’ve been waiting for the time<br>Waiting for you to say you’re mine<br>Can’t hide these feelings inside<br>Let me hold you tonight<br>I really want you to know<br>All these feeling I have to show<br>How much I’ve been loving you<br>Tell me you’ll be mine<br>Gonna love you<br>Keep on loving you dear<br>I will love you<br>Till the end of time<br>I’ll be with you no matter what happens<br>I’ll be there by your side<br>I will hold you<br>Hold you here in my arms<br>I will promise I won’t let you go<br>Stay with me, make all our dreams come true<br>I will give you all I have<br>Cause you mean the whole world to me<br>I will love you with my heart<br>And we’ll never apart</p></blockquote><h1 id="假期的学习生活"><a href="#假期的学习生活" class="headerlink" title="假期的学习生活"></a>假期的学习生活</h1><p>沉迷高数和汇编，无法自拔。然而内容实在太多太杂，只能一点一点来。</p><p>成果： <a href="https://asm.kmahyyg.xyz" target="_blank" rel="noopener">汇编语言程序设计笔记</a>  <del> 高数 :( </del></p><p>新挖的坑：</p><ul><li>DONE | <a href="https://github.com/kmahyyg/fcitx-cloudpinyin-emoji" target="_blank" rel="noopener">fcitx4-cloudpinyin 的云输入提示优化</a></li><li>GIVE UP | <a href="https://github.com/kmahyyg/life-tg-bot" target="_blank" rel="noopener">给 Telegram Bot 加上菜鸟裹裹的快递接口</a></li><li>DONE | <a href="https://github.com/kmahyyg/kmahyyg.github.io" target="_blank" rel="noopener">博客实现 CI 全自动化部署并接入又拍云存储，主题升级到 1.5.6版本</a></li><li>DONE | <a href="https://github.com/kmahyyg/shu2ics" target="_blank" rel="noopener">给 Cindy 君写了一个抓课表的小程序 - 上海大学</a></li><li>DONE | <a href="https://github.com/kmahyyg/YNU2GCalendar" target="_blank" rel="noopener">修复已知的安全问题和 Bug</a></li><li>TODO | <a href="https://github.com/kmahyyg/coolq_bot_yyg" target="_blank" rel="noopener">将 Telegram Bot 功能接入 QQ 并进行自然语言分析</a></li></ul><p>发现的 BUG：</p><ul><li>Travis CI <code>sudo-required build</code> 日常宕机</li><li>Jetbrains IDEA 系列套件不支持 KWallet 致使密钥无法存储</li></ul><h1 id="假期的娱乐生活"><a href="#假期的娱乐生活" class="headerlink" title="假期的娱乐生活"></a>假期的娱乐生活</h1><p>也就是静静的找一家咖啡馆坐坐，写写作业，胡吃海喝 :(</p><p>打卡：</p><ul><li>高中兄弟重相聚</li><li>和 TaogeAwesome 去江湖一盏灯 <a href="https://www.bilibili.com/bangumi/play/ep231153" target="_blank" rel="noopener">B站链接</a></li><li>和 Cindy 君一起去猫咖撸猫（暴露铲屎官本性）</li></ul><p>预定： 下个假期一定去重庆看看白杨大哥</p><h1 id="假期的感情生活"><a href="#假期的感情生活" class="headerlink" title="假期的感情生活"></a>假期的感情生活</h1><blockquote><p>怎么说呢，有点难以开口。时间所剩不多，简单写写吧。</p></blockquote><p>心里的那个 ta 已经住下，已经认定，再也没有机会改变，再也放不下。很想也必须可以长久下去。也尽量在我力所能及的时候和 ta 聊聊天，陪伴 ta、包容 ta、和 ta 一起面对生活、一起成长，对 ta 的爱慕也与日俱增。</p><p>也只想淡淡定定地保护 ta 一生，也只有在 ta 面前，我可以放开一切，傻得像个孩子一样。</p><p>我们的很多经历是相似的，三观是在很大程度上一致的，剩下的东西，我觉得我已经把我的背面，完全给 ta 了。</p><p>You have my promise，我不会让一些悲剧，在我们这里重演，我们永远都是独立而又统一的整体。</p><p>可能，以前的我，还是太胆怯，还是太害怕，用一层一层的外壳伪装自己。ta 觉得不够了解我，这也完全是我在某种程度上自作自受的结果。</p><p>我很怕伤害到 ta，因为没有了 ta，我也就没有了这个世界，也再也没有人可以让我卸下伪装，说出心里的负担。</p><p>我愿意无论遇到什么困难，都以 我们这个整体 为重，珍惜、珍惜，保护 ta 直到我们一同逝去。</p><p>现在的我，已经没什么了，我只想和 ta 一起，dive into each other，keep in pair with our souls forever，turn whenever to forever.</p><p>我也不愿意再等待下去，这一次，我想改一改我不愿意强求任何东西的做法，我想霸道一点点，亲爱的小喵，给我一个机会，好吗？</p><h1 id="新学期，你好！"><a href="#新学期，你好！" class="headerlink" title="新学期，你好！"></a>新学期，你好！</h1><p>没事死忙，有事忙死！我爱开源！（更爱我家的那只喵）</p><p>Good Good Study, Day Day Up! XD</p><hr><p>By Patrick Y.</p><p>Aug 18,2018</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="School" scheme="https://www.kmahyyg.xyz/tags/School/"/>
    
  </entry>
  
  <entry>
    <title>见鬼的 Travis CI</title>
    <link href="https://www.kmahyyg.xyz/2018/Sucked-Travis-CI/"/>
    <id>https://www.kmahyyg.xyz/2018/Sucked-Travis-CI/</id>
    <published>2018-08-18T07:39:24.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h2><p>最近一个月内 Travis CI 出现了 5 次基础设施不可用的情况，参见 <a href="https://www.traviscistatus.com/history" target="_blank" rel="noopener">https://www.traviscistatus.com/history</a></p><p>所有 <code>sudo: required</code> Build 均会直接 Timeout 或者 Build 失败。</p><h2 id="努力"><a href="#努力" class="headerlink" title="努力"></a>努力</h2><p>与客服邮件沟通 3 次，无果。</p><h2 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h2><p>改动：</p><pre class="line-numbers language-git"><code class="language-git">From: kmahyyg &lt;16604643+kmahyyg@users.noreply.github.com>Date: Sat, 18 Aug 2018 07:32:49 +0800Subject: [PATCH] reroute ci build to container to avoid sucked travis ci<span class="token deleted">---</span> .travis.yml | 4 ++-- 1 file changed, 2 insertions(+), 2 deletions(-)diff --git a/.travis.yml b/.travis.ymlindex 6554487..925bfd9 100644<span class="token deleted">--- a/.travis.yml</span><span class="token inserted">+++ b/.travis.yml</span><span class="token coord">@@ -1,5 +1,5 @@</span><span class="token deleted">-dist: xenial</span><span class="token deleted">-sudo: required</span><span class="token inserted">+dist: trusty</span><span class="token inserted">+sudo: false</span> language: node_js node_js:<span class="token deleted">-- </span>2.18.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>当尝试把 Build Reroute 到 Travis 的 Container-Based build infrastructure 之后，依然失败。同一个 Build, 人工重启后成功。问题仍然存在。</p><p>继续联系客服，等待回复，表达愤怒。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;情况&quot;&gt;&lt;a href=&quot;#情况&quot; class=&quot;headerlink&quot; title=&quot;情况&quot;&gt;&lt;/a&gt;情况&lt;/h2&gt;&lt;p&gt;最近一个月内 Travis CI 出现了 5 次基础设施不可用的情况，参见 &lt;a href=&quot;https://www.traviscista
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://www.kmahyyg.xyz/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>爬取课表并转换为 ICS 文件</title>
    <link href="https://www.kmahyyg.xyz/2018/SHU2ICS-Tutorial/"/>
    <id>https://www.kmahyyg.xyz/2018/SHU2ICS-Tutorial/</id>
    <published>2018-08-10T08:06:18.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-用户请直接看这里"><a href="#Windows-用户请直接看这里" class="headerlink" title="Windows 用户请直接看这里"></a>Windows 用户请直接看这里</h1><p>请您直接根据您所在的学校前往下列页面下载预编译好的 exe 文件，然后跳转到接下来的 <code>教程 Part 3</code> 部分，继续您的操作。</p><p> 云南大学：<a href="https://github.com/kmahyyg/YNU2GCalendar/releases" target="_blank" rel="noopener">https://github.com/kmahyyg/YNU2GCalendar/releases</a></p><p> 上海大学：<a href="https://github.com/kmahyyg/shu2ics/releases" target="_blank" rel="noopener">https://github.com/kmahyyg/shu2ics/releases</a></p><h1 id="其他用户建议编译安装"><a href="#其他用户建议编译安装" class="headerlink" title="其他用户建议编译安装"></a>其他用户建议编译安装</h1><hr><h2 id="以下为编译安装步骤。"><a href="#以下为编译安装步骤。" class="headerlink" title="以下为编译安装步骤。"></a>以下为编译安装步骤。</h2><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>如果您发现运行过程中出现错误，请在对应项目页面重新下载代码并重新安装 <strong>项目依赖</strong> ，若仍然无法使用，请您提交 Issue, 我会检查并向您及时反馈。</p><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>本文的主要目的是向使用以下项目的用户提供使用教程：</p><ul><li><p><a href="https://github.com/kmahyyg/ynu2gcalendar" target="_blank" rel="noopener">YNU2Gcalendar</a></p></li><li><p><a href="https://github.com/kmahyyg/shu2ics" target="_blank" rel="noopener">SHU2ICS</a></p></li></ul><p>请您根据您使用的项目点击目录侧对应的标题查看具体教程。</p><p>本次演示基于 Arch Linux, Mac OS应当可以正常使用。</p><p><del> 不保证 Windows 系统不会出现兼容性问题（咕咕咕），但是应该能正常运行。 </del></p><h2 id="系统环境依赖"><a href="#系统环境依赖" class="headerlink" title="系统环境依赖"></a>系统环境依赖</h2><p>Linux 用户请直接安装 <code>python3</code> 和 <code>python-pip</code> 包。</p><p>Windows 用户请安装 Python 并勾选 <code>Add to Path</code> 和 <code>Install PIP</code> 选项。</p><p>Mac OS 用户请直接使用此教程安装 <a href="https://pythonguidecn.readthedocs.io/zh/latest/starting/install3/osx.html" target="_blank" rel="noopener">https://pythonguidecn.readthedocs.io/zh/latest/starting/install3/osx.html</a> </p><p>下载 适用于 Windows 的 Python： <a href="https://www.python.org/downloads/release/python-370/" target="_blank" rel="noopener">https://www.python.org/downloads/release/python-370/</a></p><p>安装完成后，请您打开终端输入 <code>python3 --version &amp;&amp; pip3 --version</code> 查看是否正确安装完成。</p><p>正确回显：</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/shu2ics_pyv.png" alt="pyversion"></p><h2 id="教程-Part-1：-下载代码并安装所需的项目依赖"><a href="#教程-Part-1：-下载代码并安装所需的项目依赖" class="headerlink" title="教程 Part 1： 下载代码并安装所需的项目依赖"></a>教程 Part 1： 下载代码并安装所需的项目依赖</h2><p>请您打开您的项目对应的网址：</p><p> 上海大学用户请点击 <a href="https://github.com/kmahyyg/shu2ics" target="_blank" rel="noopener">这里</a></p><p> 云南大学用户请点击 <a href="https://github.com/kmahyyg/ynu2gcalendar" target="_blank" rel="noopener">这里</a></p><p>点击页面的 “Clone or Download” 按钮，然后选择 “Download zip”</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2ics_dcode.png" alt="drepo"></p><p>将下载好的代码解压后，打开解压得到的文件夹，并在文件夹中打开终端，输入：</p><table><thead><tr><th style="text-align:center">平台</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">Windows</td><td style="text-align:center">python -m pip install -r requirements.txt</td></tr><tr><td style="text-align:center">Linux</td><td style="text-align:center">sudo pip3 install -r requirements.txt</td></tr><tr><td style="text-align:center">Mac OS</td><td style="text-align:center">sudo pip3 install -r requirements.txt</td></tr></tbody></table><p>安装依赖并耐心等待安装完成。</p><h2 id="教程-Part-2：-创建日历文件"><a href="#教程-Part-2：-创建日历文件" class="headerlink" title="教程 Part 2： 创建日历文件"></a>教程 Part 2： 创建日历文件</h2><p>如果出现任何报错，请您检查以上的环境安装是否正常完成。</p><h3 id="SHU2ICS"><a href="#SHU2ICS" class="headerlink" title="SHU2ICS"></a>SHU2ICS</h3><p>第一步：打开终端，执行 <code>python3 ./main.py</code></p><p>第二步：按照界面提示，根据格式输入一个学期开始的时间。接下来选择学期数，并输入您的教务系统帐号和密码。 <strong>输入密码时不会有任何回显，您无需担心，请直接往下输入，输入完成按下回车键即可！</strong></p><p><img src="https://yygc.zzjnyyz.cn/asset_files/shu2ics_op.png" alt="login"></p><p>第三步： 见到 <code>Validate Image</code> 开头的提示后，软件会自动弹出验证码，请您将验证码输入到对应位置。 <strong>验证码不区分大小写</strong></p><p><img src="https://yygc.zzjnyyz.cn/asset_files/shu2ics_capt1.png" alt="captcha notice"></p><p><img src="https://yygc.zzjnyyz.cn/asset_files/shu2ics_capt2.png" alt="captcha img"></p><p>第四步： 请您耐心等待，直到导出完成，这时候，在您的当前工作文件夹内会产生一个大小不为 0 的文件 <code>Course Schedule.ics</code> 文件。导出成功！</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/shu2ics_suc.png" alt="ics file"></p><h3 id="YNU2Gcalendar"><a href="#YNU2Gcalendar" class="headerlink" title="YNU2Gcalendar"></a>YNU2Gcalendar</h3><p>第一步： 复制 <code>apikey.py.example</code> 并改名为 <code>apikey.py</code></p><p>第二步： 打开 <code>apikey.py</code> ，修改</p><table><thead><tr><th style="text-align:center">需要修改的地方</th><th style="text-align:center">在等号后面的<strong>引号内</strong>填入</th></tr></thead><tbody><tr><td style="text-align:center">ynu_ehall_name</td><td style="text-align:center">您的学号</td></tr><tr><td style="text-align:center">ynu_ehall_password</td><td style="text-align:center">您的教务系统密码</td></tr><tr><td style="text-align:center">mailacc</td><td style="text-align:center">MAILTO:您的邮箱</td></tr></tbody></table><p>并保存，关闭文本编辑器。</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/ynu2ics_modify.png" alt="modify user login crediential"></p><p><strong>如果您的统一身份认证开启了两次确认验证或者单点登陆，本程序已经预置了处理代码，但不保证有效，请您暂时关闭。</strong></p><p><strong>如果您多次使用错误密码登陆触发了验证码，也请您根据界面提示输入验证码。 Linux 用户安装 Tesseract 库后可以选择使用自动识别验证码功能，其他系统用户无解，自动识别验证码功能的准确度大约在 85% 左右，如果自动识别不准确，还烦请您根据提示手动输入验证码。</strong></p><p>第三步：运行 <code>python3 ./client.py</code> 启动程序，按照提示接受免责声明并确认您已完成前面几步，接下来按任意键继续。程序模拟登陆完成后，请您输入当前学期共几周，一般为 18 ~ 20 周。只能输入整数！</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/ynu2ics_op.png" alt="run photo"></p><p>第四步：运行完成，当前文件夹内会产生一个大小不为 0 的文件 <code>ynucal.ics</code>，导出成功！</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/ynu2ics_suc1.png" alt="success"></p><p><img src="https://yygc.zzjnyyz.cn/asset_files/ynu2ics_suc2.png" alt="success2"></p><h2 id="教程-Part-3：-使用日历文件"><a href="#教程-Part-3：-使用日历文件" class="headerlink" title="教程 Part 3： 使用日历文件"></a>教程 Part 3： 使用日历文件</h2><p>您可以将导出的 ics 结尾的文件导出到几乎所有移动设备，并在移动设备打开，即可添加到您的手机系统自带日历！</p><p>上海大学用户默认课前 25 分钟提醒上课，云南大学用户默认课前 30 分钟提醒上课。</p><p>如果您使用 Mac，可以直接打开 ics 文件，您将会在您的日历应用中看到这个课表。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><ol><li><a href="https://github.com/JeromeTan1997" target="_blank" rel="noopener">JeromeTan1997</a></li><li>我的好基友 - Cindy  （滑稽</li></ol><h2 id="运行出现问题"><a href="#运行出现问题" class="headerlink" title="运行出现问题"></a>运行出现问题</h2><ol><li>请您检查上述步骤是否完整成功完成。</li><li>欢迎您在对应项目页面点击 Issue,创建一个新的 Issue 向我反馈。</li></ol><h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><p>我的所有代码均在 GNU Affero Public License V3.0 之下授权。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Windows-用户请直接看这里&quot;&gt;&lt;a href=&quot;#Windows-用户请直接看这里&quot; class=&quot;headerlink&quot; title=&quot;Windows 用户请直接看这里&quot;&gt;&lt;/a&gt;Windows 用户请直接看这里&lt;/h1&gt;&lt;p&gt;请您直接根据您所在的学校前往
      
    
    </summary>
    
    
      <category term="School" scheme="https://www.kmahyyg.xyz/tags/School/"/>
    
  </entry>
  
  <entry>
    <title>2018 年中 工作总结</title>
    <link href="https://www.kmahyyg.xyz/2018/2018-Mid-Work-Summary/"/>
    <id>https://www.kmahyyg.xyz/2018/2018-Mid-Work-Summary/</id>
    <published>2018-07-17T03:54:49.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018-年中-工作总结"><a href="#2018-年中-工作总结" class="headerlink" title="2018 年中 工作总结"></a>2018 年中 工作总结</h1><blockquote><p>本文可能有些冗长，限于作者的表达能力有限，您可以随时关闭这篇文章。毕竟，这是给我自己看的个人总结。 （XD 辣鸡博客也没人看 2333</p><p>If you still want to go through this post, please be patient. There’s an idiom said “The most important thing is always in the end”.</p></blockquote><h2 id="校园生活-学习"><a href="#校园生活-学习" class="headerlink" title="校园生活 - 学习"></a>校园生活 - 学习</h2><h3 id="历史与现状"><a href="#历史与现状" class="headerlink" title="历史与现状"></a>历史与现状</h3><p>作为一个 “真·双一流”的大学生，当然要把学习放在最前面说。</p><p>度过了火红的 7 月，闲适的 8 月即将到来。经历了上个学期的打击之后，这个学期之中，我更加努力奋斗，减少了一些用于开源事业的时间，但仍然产出了一些实用的自用项目，例如：<a href="https://github.com/kmahyyg/YNU2GCalendar" target="_blank" rel="noopener">YNU2GCalendar</a>、<a href="https://github.com/kmahyyg/life-tg-bot" target="_blank" rel="noopener">Telegram Bot</a>、<a href="https://github.com/kmahyyg/ssrr_py_sub" target="_blank" rel="noopener">SSRR Linux Client With Subscription Support in Python</a> 。</p><p>在校内课程上，各课程均相对投入了更多的时间和精力进行学习。虽然我的高数还是再一次因为之前基础不牢和练习题目过少的原因挂掉了，但仍然感谢这一次任教这一课程的王超老师，感谢他对我学习的帮助，感谢他清晰、高效的讲解。我很后悔没有给上个学期的老师打0分。</p><p>我还要在这里感谢郁湧老师，前半段课程中因为口音问题实在没有听清讲授内容，课后也没有花更多的时间去弄明白那些相关的内容，在期中考短暂失利之后，老师与我们进行了进一步的沟通对话，将我从挂科的深渊挽救回来，这其中作为一个大学老师，他能在课后对我们做出这些帮助，个人深感三生有幸。</p><p>本学期各类课程均相对密集，还有第二课堂的压力，整体较为繁忙，不过仍相对圆满的完成了绝大多数课程，积累了不少相关知识和经验，特别感谢《计算机组成结构及原理》的王逍老师对课程相关或不相关内容的讨论和交流。</p><p>本学期期初主要的一个侧重点：第二课堂（共青团思政宣传教育课外课程），仍然用力不到位，导致目前仍然欠缺大约 20 积分的情况，下一学期由于课程更加繁忙，考虑寻找其他途径务必完成最终 60 积分的目标。</p><h3 id="未来的几个月"><a href="#未来的几个月" class="headerlink" title="未来的几个月"></a>未来的几个月</h3><p>总结过去，展望未来。由于寒暑假的时间对调，导致这个暑假异常的短，仅有不到一个月的时间，却也因为学校的管理问题，这个假期将会异常的繁忙。</p><p>对于即将到来的暑假，我对自己提出以下一点期望与三点要求：</p><ul><li>一点期望：1. 多与同学聚一聚、多与朋友聊一聊，广交益友，远离损友，远离酒肉朋友。</li><li>三点要求：<br>1.更加自律。充分运用 GTD 和 TODO LIST 工具，做好时间管理，规律作息，身体发展与智力发展并重。<br>2.完成对高等数学的进一步学习巩固。以《美国托马斯微积分教程》为基础，巩固加深对基础概念的理解并加以大量练习，开学的时候不留遗憾。<br>3.完成对《汇编语言程序设计》的自主学习。以《汇编语言 （第三版）》为蓝本，自主学习汇编语言，开学后旁听并完成相关实验，所有相关成果 <strong>必须</strong> 以 Gitbook 形式保存展示在 <a href="https://asm.kmahyyg.xyz" target="_blank" rel="noopener">个人站点</a>，在这里，也欢迎每一个看到这篇文章的人提交 PR 帮助改进。</li></ul><h2 id="校园生活-日常的那些琐碎"><a href="#校园生活-日常的那些琐碎" class="headerlink" title="校园生活 - 日常的那些琐碎"></a>校园生活 - 日常的那些琐碎</h2><p>就只说说宿舍吧。古语有云：“志不同道不合，不相与谋。” 宿舍的其他三个舍友热爱短视频与游戏，对我这样一个完全偏 Quiet 范的人来说，可以说完全不搭调。但请大家记住一点，<strong>保持对他人最基本的尊重</strong>。晚上熄灯以后，请不要外放音频或者大声吵闹，请尽可能的使用耳机。</p><p>宿舍的环境是大家共同生活、共同维护的，不要舍长不说话就不会动一动，公共区域暂且不提，请大家自觉维护好自己那一亩三分地的卫生。自觉定期轮流打扫卫生，是每一个宿舍成员最基本的责任。</p><h2 id="校园之外-自我提升的步伐"><a href="#校园之外-自我提升的步伐" class="headerlink" title="校园之外 - 自我提升的步伐"></a>校园之外 - 自我提升的步伐</h2><blockquote><p>画大饼时间到！</p></blockquote><p>To-do List:</p><ul><li>驾照学习</li><li>H5 + JS + CSS 前端开发学习</li><li>Java + Kotlin 移动开发学习</li><li>基于 Python 的与计算机底层交互的快速工具开发</li><li>英语学习 （例如： IELTS）</li></ul><p>本人在此承诺：所有本人在业余开发的程序，将尽可能维护到底，所有源代码均按照 GNU Affero Public License 3.0 开源。</p><h2 id="校内校外-那年那人那些事"><a href="#校内校外-那年那人那些事" class="headerlink" title="校内校外 - 那年那人那些事"></a>校内校外 - 那年那人那些事</h2><h3 id="2018-Wikipedia-Summer-Meetup-Kunming"><a href="#2018-Wikipedia-Summer-Meetup-Kunming" class="headerlink" title="2018 Wikipedia Summer Meetup @ Kunming"></a>2018 Wikipedia Summer Meetup @ Kunming</h3><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-wikipdaKM1.jpg" alt="WikiMeetup，图片打不开请使用科学上网软件"></p><p>参加了 <a href="https://zh.wikipedia.org/wiki/Wikipedia:%E8%81%9A%E4%BC%9A/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86%E7%A4%BE%E7%BE%A4%E8%81%9A%E4%BC%9A/2018%E6%98%86%E6%98%8E%E5%A4%8F%E8%81%9A" target="_blank" rel="noopener">2018 年 维基百科大陆维基人夏季聚会</a>，很开心在这次聚会上认识了各路豪杰，包括 Zhangmoon、Chen、河水、仪莎 和 Evelyn。他们很多都是（曾经或正在）旅居海外的华人，中文维基数十万用户，实际的参与编辑的月活跃用户其实不到五千。</p><p>维基百科作为一个中立、有一定专业性的人人参与的百科全书，是我们每个人查找资料的好工具。在这里，我鼓励每一个有条件的朋友积极查阅维基百科，获取更加权威的资料；如果你有一定的英文水平，也可以帮助翻译英文维基百科到中文维基百科；如果你在相关领域工作，你也可以帮助撰写完善相关条目。 Let’s make it great again!</p><h3 id="2018-Student-Open-Source-Conference-ChongQing"><a href="#2018-Student-Open-Source-Conference-ChongQing" class="headerlink" title="2018 Student Open-Source Conference @ ChongQing"></a>2018 Student Open-Source Conference @ ChongQing</h3><p><a href="https://openingsource.org/1859/zh-tw/" target="_blank" rel="noopener">2018 年中国大陆首届学生开源年会</a>，本来说要去，但由于课业原因没有前往，希望下一年能够赶上吧。能够与同一辈中的开源领袖进行沟通、交流也是让人开心的。希望每个人都能为开源社区建设贡献一份自己的力量。</p><h3 id="情感：那些心中青春的悸动"><a href="#情感：那些心中青春的悸动" class="headerlink" title="情感：那些心中青春的悸动"></a>情感：那些心中青春的悸动</h3><blockquote><p>前方高能，请非相关人士直接放弃阅读这一部分。<br>此部分将尽可能使用英文撰写。</p></blockquote><p>  My dearest Zoe,</p><p>  I hope this letter finds you well. I’m so sorry if I really did something hurt you so deeply. At the very first, I’m so glad and still hoping to be your best private treehole forever.</p><p>  Starting from the very beginning since September,2017 , We met each other. At that time, I’m bored to this life and society, being disappointed to each man around the society, cuz I believe that they all only know to chase the financial benefits.</p><p>  After some attempts to get in touch with you, I’ve already fallen in love with you silently, even myself didn’t notice it. I’ve hidden the inner man at the deepest place of my heart and kept showing poker faces for so many years due to a lot of unpleasant growth experience.</p><p>  Like something in the television series, right? I can’t believe that, but, It’s true, I met you here, in this beautiful scenery. That day, when you told me you’ve already found someone you preferred, my heart was hit heavily with something, and also found that you are really special in all the girls I met before. At that time, I didn’t think too much, and just give you my best wishes.</p><p>  When going back to school this year, I just met your a few times accidentally. I’m a truly warm-hearted man, I can’t stand someone I may consider so important seems so unhappy, I tried to comfort you. Of course, it takes some effects. And then, I just want to be your treehole. After a few times meeting, finally, I realized I have fallen in a trap so deeply, which called love.</p><p>  So I just tried to keep my heart in peace and stop that. I discovered that I have such a willing to protect you from being hurt. I can’t stop it myself from my inner space. And yesterday, a senior grade brother send a post in Qzone, said “The saddest one, of course is that you met someone special enough, but fully understand you will never get together with that man, Sooner or later, you’ll have to give it up”. As I final posted, “It is better to suffer short-term pain so that one will not have to suffer long-term pain”, I tried to cut off this impracticable daydream completely. ( My heart was completely broken, I can’t afford to lose you, I also never want to disrupt your life. I want to fully be yours, give everything I earned to you.)</p><p>  When I received your messages late this afternoon. I’m really astonished you used “so-called retribution”, that’s why I wrote this letter, that’s why I said I may crossed some borders that I shouldn’t.</p><p>  Apologize again for any inconvenience I brought to you.</p><p>  Best Wishes,<br>  Your possible forever private tree hole,<br>  Patrick</p><p>  July 17,2018</p><h2 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h2><p>Copyright Owned by Patrick Young<br>July 17, 2018<br>All Rights Reserved.<br>PLEASE DO NOT FORWARD TO ANY OTHER PLACE.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018-年中-工作总结&quot;&gt;&lt;a href=&quot;#2018-年中-工作总结&quot; class=&quot;headerlink&quot; title=&quot;2018 年中 工作总结&quot;&gt;&lt;/a&gt;2018 年中 工作总结&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文可能有些冗长，限于作者的表达能
      
    
    </summary>
    
    
      <category term="School" scheme="https://www.kmahyyg.xyz/tags/School/"/>
    
  </entry>
  
  <entry>
    <title>InfoSec-XSS Attack</title>
    <link href="https://www.kmahyyg.xyz/2018/InfoSec-XSS/"/>
    <id>https://www.kmahyyg.xyz/2018/InfoSec-XSS/</id>
    <published>2018-07-08T14:08:00.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<p>期末考试复习，查了下XSS的相关资料，记录在此。</p><p><a href="https://www.ctolib.com/docs/sfile/xss-naxienian/index.html" target="_blank" rel="noopener">https://www.ctolib.com/docs/sfile/xss-naxienian/index.html</a></p><p><a href="https://www.knowsec.net/archives/78/" target="_blank" rel="noopener">https://www.knowsec.net/archives/78/</a></p><p><a href="https://www.zhihu.com/question/26628342" target="_blank" rel="noopener">https://www.zhihu.com/question/26628342</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;期末考试复习，查了下XSS的相关资料，记录在此。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ctolib.com/docs/sfile/xss-naxienian/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://www.kmahyyg.xyz/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>InfoSec-CSRF and MISC</title>
    <link href="https://www.kmahyyg.xyz/2018/InfoSec_CSRF/"/>
    <id>https://www.kmahyyg.xyz/2018/InfoSec_CSRF/</id>
    <published>2018-07-06T01:03:26.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<p>今天上课的时候，老师提到了CSRF跨站脚本攻击，特查阅资料。<br>发现了一个有趣的博客，看起来作者在阿里工作。</p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p><a href="http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="noopener">http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html</a></p><p><a href="https://kennel209.gitbooks.io/owasp-testing-guide-v4/content/zh/web_application_security_testing/testing_for_cross_site_request_forgery_csrf_otg-sess-005.html" target="_blank" rel="noopener">https://kennel209.gitbooks.io/owasp-testing-guide-v4/content/zh/web_application_security_testing/testing_for_cross_site_request_forgery_csrf_otg-sess-005.html</a></p><h1 id="同一文件同样打包为ZIP，但MD5不同"><a href="#同一文件同样打包为ZIP，但MD5不同" class="headerlink" title="同一文件同样打包为ZIP，但MD5不同"></a>同一文件同样打包为ZIP，但MD5不同</h1><p><a href="http://adoyle.me/blog/why-zip-file-checksum-changed.html" target="_blank" rel="noopener">http://adoyle.me/blog/why-zip-file-checksum-changed.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天上课的时候，老师提到了CSRF跨站脚本攻击，特查阅资料。&lt;br&gt;发现了一个有趣的博客，看起来作者在阿里工作。&lt;/p&gt;
&lt;h1 id=&quot;CSRF&quot;&gt;&lt;a href=&quot;#CSRF&quot; class=&quot;headerlink&quot; title=&quot;CSRF&quot;&gt;&lt;/a&gt;CSRF&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://www.kmahyyg.xyz/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>2018 Wikipedia Summer Meetup: Kunming</title>
    <link href="https://www.kmahyyg.xyz/2018/2018-Wikipedia-Summer-Meetup-Kunming/"/>
    <id>https://www.kmahyyg.xyz/2018/2018-Wikipedia-Summer-Meetup-Kunming/</id>
    <published>2018-07-01T13:29:00.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<p>详情戳这里：  <a href="https://zh.wikipedia.org/wiki/Wikipedia:%E8%81%9A%E4%BC%9A/2018%E6%98%86%E6%98%8E%E5%A4%8F%E8%81%9A" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Wikipedia:%E8%81%9A%E4%BC%9A/2018%E6%98%86%E6%98%8E%E5%A4%8F%E8%81%9A</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;详情戳这里：  &lt;a href=&quot;https://zh.wikipedia.org/wiki/Wikipedia:%E8%81%9A%E4%BC%9A/2018%E6%98%86%E6%98%8E%E5%A4%8F%E8%81%9A&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018 YNU CTF 信息安全铁人三项赛数据赛</title>
    <link href="https://www.kmahyyg.xyz/2018/2018-YNU-CTF-01/"/>
    <id>https://www.kmahyyg.xyz/2018/2018-YNU-CTF-01/</id>
    <published>2018-07-01T06:38:45.000Z</published>
    <updated>2018-10-31T12:46:45.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Original-Source-（有改动）"><a href="#Original-Source-（有改动）" class="headerlink" title="Original Source （有改动）"></a>Original Source （有改动）</h1><blockquote><p>HTTPs://racinedee.github.io/2018/07/01/云南大学第一届信息安全铁人三项赛数据赛writeup/</p></blockquote><blockquote><p>第一届铁三校赛数据赛writeup。感觉比分区赛的题目要难，主要是题目中加了一个脑洞。  </p></blockquote><h1 id="O-O-O-O-O-O-O-O"><a href="#O-O-O-O-O-O-O-O" class="headerlink" title="-O-O-O-O-O-O-O-O-"></a>-O-O-O-O-O-O-O-O-</h1><p>###小利访问最频繁的网站是？（只填写一级域名） “小利访问最频繁的网站是？（只填写一级域名）”)小利访问最频繁的网站是？（只填写一级域名）</p><p>既然是访问最频繁的网站，所以直接筛选HTTP流量: Statistics - HTTP - Requests，按Percent降序排列，完成。</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf1.png" alt=""></p><h3 id="小利的IP是多少？"><a href="#小利的IP是多少？" class="headerlink" title="小利的IP是多少？"></a>小利的IP是多少？</h3><p>从HTTP流量中可以发现发起请求最多的IP地址为192.168.12.126，从而可以判断小利的IP即为<code>192.168.12.126</code></p><h3 id="黑客的网站IP是什么？"><a href="#黑客的网站IP是什么？" class="headerlink" title="黑客的网站IP是什么？"></a>黑客的网站IP是什么？</h3><p>要找黑客网站IP，首先小利肯定对黑客网站进行了访问，所以对数据包进行筛选。这里当时比赛的时候是队友发现了这条异常流量，小利访问了一个域名为<a href="http://www.waigua.com的网站，下载了名为万能吃鸡助手的exe可执行文件。所以猜测黑客这就是黑客网站，而小利下载的文件就是木马文件(HTTP://www.waigua.com的网站，下载了名为万能吃鸡助手的exe可执行文件。所以猜测黑客这就是黑客网站，而小利下载的文件就是木马文件)" target="_blank" rel="noopener">www.waigua.com的网站，下载了名为万能吃鸡助手的exe可执行文件。所以猜测黑客这就是黑客网站，而小利下载的文件就是木马文件(HTTP://www.waigua.com的网站，下载了名为万能吃鸡助手的exe可执行文件。所以猜测黑客这就是黑客网站，而小利下载的文件就是木马文件)</a></p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf2.png" alt=""></p><p>所以黑客网站IP就是<code>192.168.12.148</code></p><h3 id="小利从黑客网站下载的文件名是什么？"><a href="#小利从黑客网站下载的文件名是什么？" class="headerlink" title="小利从黑客网站下载的文件名是什么？"></a>小利从黑客网站下载的文件名是什么？</h3><p>从上一题的分析就知道下载的文件名是<code>万能吃鸡助手.exe</code></p><h3 id="小利的网站后台密码是多少？"><a href="#小利的网站后台密码是多少？" class="headerlink" title="小利的网站后台密码是多少？"></a>小利的网站后台密码是多少？</h3><p>比赛的时候做到这题就没有思路了，一开始想到的是可能在流量中存在登录网站后台的的数据报文，所以筛选了一波post请求<br>在post请求中没有发现登录相关的流量，但是发现小利向黑客的网站上传了<code>Desktop.zip</code>文件。</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf3.png" alt=""></p><p>这个操作肯定不是小利自己进行的，所以猜测是小利下载并运行了从黑客网站上下载的木马文件。木马的操作就是将小利桌面的文件内容打包上传到黑客的网站。<br>所以将此文件导出。打开导出的.zip文件后发现没有内容</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf4.png" alt=""></p><p>用010editor打开文件也并没有发现zip头。然后就没有思路了。</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf5.png" alt=""></p><p>比赛结束之后找学长，学长提示后面的题目答案全在流量中提取出的压缩包内。<br>所以提取压缩包这个思路应该是对的，问题就出在压缩包文件内容上。<br>后来又仔细看了看文件内容，发现了这道题目中的坑。</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf6.png" alt=""></p><p>zip文件的文件头为<code>50 4B 03 04</code> ，而文件中的16进制的每一个字节的两个字符被反序了，所以导致了zip文件无法解析。<br>然后写脚本还原正确的文件</p><p>![]<a href="https://yygc.zzjnyyz.cn(/asset_files/2018-ynuctf7.png)" target="_blank" rel="noopener">https://yygc.zzjnyyz.cn(/asset_files/2018-ynuctf7.png)</a></p><p>还原之后打开文件：</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf8.png" alt=""></p><p>和之前的分析一样，木马程序的功能就是将小利桌面的文件打包并上传到黑客的网站。忽略所有的快捷方式，有效的信息只有三个，一个<code>joomla.rar</code>压缩文件，一个<code>Diary.docx</code>的word文档。一个<code>joomla.sql</code>数据库文件<br>很明显，joomla.rar压缩文件中就是小利网站的源码，<br>Joomla.sql文件就是小利网站的数据库文件。</p><p>而这道题目问的是小利的网站后台登录密码，很容易就能想到去数据库里面找。  </p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf9.png" alt=""></p><p>打开数据库查找<code>‘password’</code>关键字，在文件最后看到了user表，里面有password字段，而下面的语句向这个表里面插入了数据</p><p>对应一下就可以知道加密后的密码为<code>$2y$10$fOY7WmvLcJ2hpXaD0zZB4eZq/UoWqIkphuKvS2Eybymhu3HgZcmme</code><br>而密码解密的明文为woaini123，所以小利网站后台密码即为<code>woaini123</code></p><h3 id="小利的网站数据库密码是多少？"><a href="#小利的网站数据库密码是多少？" class="headerlink" title="小利的网站数据库密码是多少？"></a>小利的网站数据库密码是多少？</h3><p>数据库里面一般可以在网站的配置文件里面找到。<br>而这道题也是一样，直接去小利个人网站的网站配置文件里面就能看到数据库的用户名和密码都是<code>root</code></p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf10.png" alt=""></p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf11.png" alt=""></p><h3 id="小利的网站可以访问后台管理登陆页面的文件名是什么？"><a href="#小利的网站可以访问后台管理登陆页面的文件名是什么？" class="headerlink" title="小利的网站可以访问后台管理登陆页面的文件名是什么？"></a>小利的网站可以访问后台管理登陆页面的文件名是什么？</h3><p>这道题很明显，<code>xiaoli_admin.php</code></p><h3 id="小利的网站已存在的WebShell文件名是什么？"><a href="#小利的网站已存在的WebShell文件名是什么？" class="headerlink" title="小利的网站已存在的WebShell文件名是什么？"></a>小利的网站已存在的WebShell文件名是什么？</h3><p>这道题肯定不能一个一个去查看文件，所以直接下载一个D盾，对目录进行扫描</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf12.png" alt=""></p><p>直接找到Shell文件为<code>help.php</code></p><h3 id="若登陆WebShell成功时，Cookie值会被设置成多少？"><a href="#若登陆WebShell成功时，Cookie值会被设置成多少？" class="headerlink" title="若登陆WebShell成功时，Cookie值会被设置成多少？"></a>若登陆WebShell成功时，Cookie值会被设置成多少？</h3><p>找到D盾扫描出的WebShell文件</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf13.png" alt=""></p><p>通过文件内容的一些特征可以知道这是一个silic的php大马<br>直接定位到登录设置Cookie的函数</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf14.png" alt=""></p><p>如果Cookie等于设定的Cookie值，则登录成功，而这里的Cookie就是password这个变量的md5值。往上查找这个变量值</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf15.png" alt=""></p><p>MD5一下</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf16.png" alt=""></p><p>答案为<code>d6ef28a5a89d8ab0c803ef11c32eee34</code></p><h3 id="小利的爸爸称呼小利的妈妈什么？"><a href="#小利的爸爸称呼小利的妈妈什么？" class="headerlink" title="小利的爸爸称呼小利的妈妈什么？"></a>小利的爸爸称呼小利的妈妈什么？</h3><p>最后一题答案在日记中：</p><p><img src="https://yygc.zzjnyyz.cn/asset_files/2018-ynuctf17.png" alt=""></p><p>这个笑话还挺好笑的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Original-Source-（有改动）&quot;&gt;&lt;a href=&quot;#Original-Source-（有改动）&quot; class=&quot;headerlink&quot; title=&quot;Original Source （有改动）&quot;&gt;&lt;/a&gt;Original Source （有改动）&lt;/
      
    
    </summary>
    
    
      <category term="School" scheme="https://www.kmahyyg.xyz/tags/School/"/>
    
  </entry>
  
</feed>
